
C:\Users\alexe\Projects\Web\Blogger>python genlist.py
{
  "kind": "blogger#postList",
  "nextPageToken": "CgkIChjB-Ljr8isQ2srkiui3tb06",
  "items": [
    {
      "kind": "blogger#post",
      "id": "8944155074612105394",
      "blog": {
        "id": "4213915415549125978"
      },
      "published": "2018-07-04T20:18:00-07:00",
      "updated": "2018-07-04T20:18:49-07:00",
      "url": "http://lablk.blogspot.com/2018/07/jni.html",
      "selfLink": "https://www.googleapis.com/blogger/v3/blogs/4213915415549125978/posts/8944155074612105394",
      "title": "[JNI] 객체 사용과 메모리 관리",
      "content": "\u003ch2\u003e\n개요\u003c/h2\u003e\n\u003cbr /\u003e\nJNI를 통해 C에서 Java의 객체에 접근할 수 있고  자유롭게 생성할 수 있다. 그러나 C에서 접근했거나 생성한 객체가 여전히 C에서 참조를 갖고 있는지 알 수 없으므로, garbage collector가 이러한 객체를 어떻게 처리할지 알 수 없게 된다. 이를 위해 JNI는 C에서 해당 객체에 대한 참조를 명시적으로 제거 할 수 있는 함수를 제공하여 garbage collector가 잘 동작할 수 있도록 메커니즘이 마련되어 있다.\u003cbr /\u003e\n\u003cbr /\u003e\n이번 글에서는 C에서 Java 객체를 사용하는 방법과, 메모리 관리 방법을 소개한다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cbr /\u003e\n\u003ch2\u003e\n참고 자료\u003c/h2\u003e\n\u003cbr /\u003e\n\u003ca href=\"http://barbie.uta.edu/~jli/Resources/Resource%20Provisoning&amp;Performance%20Evaluation/85.pdf\"\u003eThe Java Native Interface: Programmer's Guide and Specification\u003c/a\u003e\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cbr /\u003e\n\u003ch2\u003e\n1. String\u003c/h2\u003e\n\u003cbr /\u003e\nC에서 String을 처리할 수 있는 함수는 다음과 같다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://2.bp.blogspot.com/-wsL9FZ-yqzQ/Wz14yIs3z7I/AAAAAAAAApI/yTSkgcvJvKcIcLp4iQibebgyEUVFxxw3QCLcBGAs/s1600/20180705_104655.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"848\" data-original-width=\"603\" src=\"https://2.bp.blogspot.com/-wsL9FZ-yqzQ/Wz14yIs3z7I/AAAAAAAAApI/yTSkgcvJvKcIcLp4iQibebgyEUVFxxw3QCLcBGAs/s1600/20180705_104655.png\" /\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cbr /\u003e\n다음과 같이 사용할 수 있다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv style=\"text-align: right;\"\u003e\nHello.java\u003c/div\u003e\n\u003cdiv style=\"background-color: #bbbbbb; color: black; font: 14px &quot;courier new&quot;; overflow: auto; padding: 5px;\"\u003e\npublic class Hello\u003cbr /\u003e\n{\u003cbr /\u003e\n&nbsp; &nbsp; public native String getText(String message);\u003cbr /\u003e\n}\u003c/div\u003e\n\u003cbr /\u003e\n\u003cdiv style=\"text-align: right;\"\u003e\nhello.c\u003c/div\u003e\n\u003cdiv style=\"background-color: #bbbbbb; color: black; font: 14px &quot;courier new&quot;; overflow: auto; padding: 5px;\"\u003e\nJNIEXPORT jstring JNICALL\u003cbr /\u003e\nJava_Hello_getText(JNIEnv *env, jobject obj, jstring message)\u003cbr /\u003e\n{\u003cbr /\u003e\n&nbsp; &nbsp; char buff[255];\u003cbr /\u003e\n&nbsp; &nbsp; const char *msg;\u003cbr /\u003e\n\u003cbr /\u003e\n&nbsp; &nbsp; /* get string from java String object */\u003cbr /\u003e\n&nbsp; &nbsp; msg = (*env)-&gt;GetStringUTFChars(env, message, NULL);\u003cbr /\u003e\n&nbsp; &nbsp; if(msg == NULL)\u003cbr /\u003e\n&nbsp; &nbsp; &nbsp; &nbsp; return NULL; /* OutOfMemoryError already thrown */\u003cbr /\u003e\n\u003cbr /\u003e\n&nbsp; &nbsp; printf(\"received from java : %s\\n\", msg);\u003cbr /\u003e\n\u003cbr /\u003e\n&nbsp; &nbsp; /* free the memory allocated for msg */\u003cbr /\u003e\n&nbsp; &nbsp; (*env)-&gt;ReleaseStringUTFChars(env, message, msg);\u003cbr /\u003e\n\u003cbr /\u003e\n&nbsp; &nbsp; scanf(\"%s\", buff);\u003cbr /\u003e\n\u003cbr /\u003e\n&nbsp; &nbsp; /* create java String object */\u003cbr /\u003e\n&nbsp; &nbsp; return (*env)-&gt;NewStringUTF(env, buff);\u003cbr /\u003e\n}\u003c/div\u003e\n\u003cbr /\u003e\nJava String은 GetStringUTFChars() 함수를 통해 C 문자열(캐릭터의 배열)로 가져올 수 있다.\u003cbr /\u003e\n가져온 문자열은 사용이 모두 끝난 후에 ReleaseStringUTFChars() 함수를 통해 할당된 메모리 영역을 반환해야 한다.\u003cbr /\u003e\n\u003cbr /\u003e\nC 문자열로부터 NewStringUTF() 함수를 통해 java String 객체를 생성할 수 있다.\u003cbr /\u003e\n 이를 통해 생성된 객체는 전적으로 java에서만 사용되는 것으로 간주되며, C에서 참조를 갖고 있더라도 garbage collector가 이 를 확인하지 않으므로, java에서의 참조만 없다면 해당 객체는 제거될 수 있다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cbr /\u003e\n\u003ch2\u003e\n2. Object construction\u003c/h2\u003e\n\u003cbr /\u003e\n객체를 생성하는 순서는 다음과 같다.\u003cbr /\u003e\n1. 생성할 객체의 class를 얻는다.\u003cbr /\u003e\n2. 생성자(constructor)를 얻는다.\u003cbr /\u003e\n3. 생 성자 매개변수와 함께 객체를 생성한다.\u003cbr /\u003e\n\u003cbr /\u003e\n다음은 사용 예이다.\u003cbr /\u003e\n\u003cdiv style=\"text-align: left;\"\u003e\n\u003cbr /\u003e\u003c/div\u003e\n\u003cdiv style=\"background-color: #bbbbbb; color: black; font: 14px &quot;courier new&quot;; overflow: auto; padding: 5px;\"\u003e\nJNIEXPORT jobject JNICALL\u003cbr /\u003e\nJava_Hello_getObject(JNIEnv *env, jobject obj)\u003cbr /\u003e\n{\u003cbr /\u003e\n&nbsp; &nbsp; jClass class;\u003cbr /\u003e\n&nbsp; &nbsp; jmethodID constructor;\u003cbr /\u003e\n&nbsp; &nbsp; int parameter = 1;\u003cbr /\u003e\n&nbsp; &nbsp; jobject result;\u003cbr /\u003e\n\u003cbr /\u003e\n&nbsp; &nbsp; /* get class */\u003cbr /\u003e\n&nbsp; &nbsp; class = (*env)-&gt;FindClass(env, \"java/lang/Integer\");\u003cbr /\u003e\n&nbsp; &nbsp; if(class == NULL)\u003cbr /\u003e\n&nbsp; &nbsp; &nbsp; &nbsp; return NULL;\u003cbr /\u003e\n\u003cbr /\u003e\n&nbsp; &nbsp; /* get constructor */\u003cbr /\u003e\n&nbsp; &nbsp; constructor = (*env)-&gt;GetMethodID(env, class, \"&lt;init&gt;\", \"(I)V\");\u003cbr /\u003e\n&nbsp; &nbsp; if(constructor == NULL)\u003cbr /\u003e\n&nbsp; &nbsp; &nbsp; &nbsp; return NULL;\u003cbr /\u003e\n\u003cbr /\u003e\n&nbsp; &nbsp; /* construct object */\u003cbr /\u003e\n&nbsp; &nbsp; result = (*env)-&gt;NewObject(env, class, constructor, parameter);\u003cbr /\u003e\n\u003cbr /\u003e\n&nbsp; &nbsp; return result;\u003cbr /\u003e\n}\u003c/div\u003e\n\u003cbr /\u003e\nFindClass() 함수를 통해 특정 클래스를 얻어올 수 있다. 두 번째 매개변수로 얻어올 클래스의  패키지 경로를 포함한 전체 이름을 적는다.\u003cbr /\u003e\n\u003cbr /\u003e\nGetMethodID() 함수는 특정 클래스의 메소드를 얻어오는 함수이다. 원래 세 번째 매개변수에는 메소드의 이름, 네 번째 매개변수에는 메소드의 시그니처를 넣어야 하지만, 생성자를 얻어올 경우 메소드의 이름을 \"init\"으로, 시그니처의 반환 타입은 void를 의미하는 \"V\"로 고정해야 한다.\u003cbr /\u003e\n\u003cbr /\u003e\n메소드 시그니처는 메소드의 반환 타입과 매개변수들의 타입을 문자열로 정의한 것으로 \"({매개변수}){반환타입}\" 형식이다.\u003cbr /\u003e\n\u003cbr /\u003e\n각각 java 타입에 해당하는 시그니처는 다음과 같다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003ctable align=\"center\" border=\"0\" cellpadding=\"10\" cellspacing=\"1\" style=\"text-align: center;\"\u003e\u003ctbody\u003e\n\u003ctr\u003e\u003ctd\u003eType\u003c/td\u003e\u003ctd\u003eSignature\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003evoid\u003c/td\u003e\u003ctd\u003eV\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eboolean\u003c/td\u003e\u003ctd\u003eZ\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003ebyte\u003c/td\u003e\u003ctd\u003eB\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003echar\u003c/td\u003e\u003ctd\u003eC\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eint\u003c/td\u003e\u003ctd\u003eI\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003elong\u003c/td\u003e\u003ctd\u003eJ\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003efloat\u003c/td\u003e\u003ctd\u003eF\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003edouble\u003c/td\u003e\u003ctd\u003eD\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eobject\u003c/td\u003e\u003ctd\u003eL{패키지 경로를 포함한 클래스 전체 이름};\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003etype[]\u003c/td\u003e\u003ctd\u003e[{해당 타입의 시그니처}\u003c/td\u003e\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cbr /\u003e\n예를 들어서\u003cbr /\u003e\n\u003cbr /\u003e\nvoid aaa() -&gt; ()V\u003cbr /\u003e\nint bbb(boolean a, char, b) -&gt; (ZC)I\u003cbr /\u003e\nString[] ccc(int[] c, MyClass d) -&gt; ([ILmyPackage/MyClass;)[Ljava/lang/String;\u003cbr /\u003e\n\u003cbr /\u003e\n이 된다.\u003cbr /\u003e\n\u003cbr /\u003e\n마지막으로 NewObject() 함수를 통해 해당 객체를 생성 한다. 4번째 파라미터부터는 지정된 생성자의 파라미터로 사용될 변수를 순서대로 넣으면 된다. 만약 생성자의 파라미터가 두 개라면 4번째 파라미터에 생성자의 1번째 파라미터, 5번째 파라미터에 생성자의 2번째 파라미터를 넣으면 된다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cbr /\u003e\n\u003ch2\u003e\n3. Array\u003c/h2\u003e\n\u003cbr /\u003e\n다음은 배열을 처리하는 함수들이다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://4.bp.blogspot.com/-uU7BFPEUF_g/Wz2H66aUN2I/AAAAAAAAApg/JCjOuTkTIyIMJp89Ac6dDz7gaOMaYvVCgCLcBGAs/s1600/20180705_115213.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"478\" data-original-width=\"603\" src=\"https://4.bp.blogspot.com/-uU7BFPEUF_g/Wz2H66aUN2I/AAAAAAAAApg/JCjOuTkTIyIMJp89Ac6dDz7gaOMaYvVCgCLcBGAs/s1600/20180705_115213.png\" /\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cbr /\u003e\n&lt;Type&gt;에 원하는 배열 타입을 입력하면 된다. 예를 들어 int 배열을 생성하고 싶은 경우\u003cbr /\u003e\nNewIntArray() 함수를 사용한다.\u003cbr /\u003e\n\u003cbr /\u003e\nGet&lt;Type&gt;ArrayRegion() 함수와 Get&lt;Type&gt;ArrayElements() 함수는 모두 배열의 값을 얻어올 수 있다는 공통점이 있지만 사용 방법이 다르다.\u003cbr /\u003e\n\u003cbr /\u003e\nGet&lt;Type&gt;ArrayRegion() 함수는 다음과 같이 얻어올 메모리 영역이 미리 확보되어 있을 때 사용한다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv style=\"background-color: #bbbbbb; color: black; font: 14px &quot;courier new&quot;; overflow: auto; padding: 5px;\"\u003e\nJNIEXPORT jint JNICALL\u003cbr /\u003e\nJava_Hello_sumArray(JNIEnv *env, jobject obj, jintArray arr)\u003cbr /\u003e\n{\u003cbr /\u003e\n&nbsp; &nbsp; int buf[10];\u003cbr /\u003e\n&nbsp; &nbsp; int i, sum = 0;\u003cbr /\u003e\n\u003cbr /\u003e\n&nbsp; &nbsp; /* get int array data */\u003cbr /\u003e\n&nbsp; &nbsp; (*env)-&gt;GetIntArrayRegion(env, arr, 0, 10, buf);\u003cbr /\u003e\n\u003cbr /\u003e\n&nbsp; &nbsp; for(i = 0; i &lt; 10; i++)\u003cbr /\u003e\n&nbsp; &nbsp; &nbsp; &nbsp; sum += buf[i];\u003cbr /\u003e\n\u003cbr /\u003e\n&nbsp; &nbsp; return sum;\u003cbr /\u003e\n}\u003c/div\u003e\n\u003cbr /\u003e\n반면 Get&lt;Type&gt;ArrayElements() 함수는 메모리 영역이 확보된 배열 포인터를 반환한다. 따라서 해당 포인터를 모두 사용하고 난 다음에는 Release&lt;Type&gt;ArrayElements() 함수를 통해  해당 메모리 영역을 반환해야 한다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv style=\"background-color: #bbbbbb; color: black; font: 14px &quot;courier new&quot;; overflow: auto; padding: 5px;\"\u003e\nJNIEXPORT jint JNICALL\u003cbr /\u003e\nJava_Hello_sumArray(JNIEnv *env, jobject obj, jintArray arr)\u003cbr /\u003e\n{\u003cbr /\u003e\n&nbsp; &nbsp; int *buf;\u003cbr /\u003e\n&nbsp; &nbsp; int i, sum = 0;\u003cbr /\u003e\n\u003cbr /\u003e\n&nbsp; &nbsp; /* get int array data */\u003cbr /\u003e\n&nbsp; &nbsp; buf = (*env)-&gt;GetIntArrayElements(env, arr, NULL);\u003cbr /\u003e\n&nbsp; &nbsp; if(buf == NULL)\u003cbr /\u003e\n&nbsp; &nbsp; &nbsp; &nbsp; return 0;\u003cbr /\u003e\n\u003cbr /\u003e\n&nbsp; &nbsp; for(i = 0; i &lt; 10; i++)\u003cbr /\u003e\n&nbsp; &nbsp; &nbsp; &nbsp; sum += buf[i];\u003cbr /\u003e\n\u003cbr /\u003e\n&nbsp; &nbsp; /* release int array memory */\u003cbr /\u003e\n&nbsp; &nbsp; (*env)-&gt;ReleaseIntArrayElements(env, arr, buf, 0);\u003cbr /\u003e\n\u003cbr /\u003e\n&nbsp; &nbsp; return sum;\u003cbr /\u003e\n}\u003c/div\u003e\n\u003cbr /\u003e\n\u003cbr /\u003e\n\u003ch2\u003e\n4. DeleteLocalRef()\u003c/h2\u003e\n\u003cbr /\u003e\n만약 C에서 객체를 생성하였는데, Java로 반환되지도 않고 더 이상 사용되지 않는다면 DeleteLocalRef() 함수를 통해 반드시 해당 객체에 대한 참조를 지 워야 한다.\u003cbr /\u003e\n\u003cbr /\u003e\n예를 들어 다음과 같이 object array를 만드는 경우에 배열의 각 요소는 배열에 넣은 후 반환되지 않고 더 이상 사용되지 않는다. 이 때 DeleteLocalRef() 함수를 호출해야 한다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv style=\"background-color: #bbbbbb; color: black; font: 14px &quot;courier new&quot;; overflow: auto; padding: 5px;\"\u003e\nJNIEXPORT jobjectArray JNICALL\u003cbr /\u003e\nJava_Hello_getNameList(JNIEnv *env, jobject obj)\u003cbr /\u003e\n{\u003cbr /\u003e\n&nbsp; &nbsp; int i;\u003cbr /\u003e\n&nbsp; &nbsp; char buf[255];\u003cbr /\u003e\n&nbsp; &nbsp; jstring name;\u003cbr /\u003e\n\u003cbr /\u003e\n&nbsp; &nbsp; jclass stringClass;\u003cbr /\u003e\n&nbsp; &nbsp; jobjectArray nameList;\u003cbr /\u003e\n\u003cbr /\u003e\n&nbsp; &nbsp; /* construct String array */\u003cbr /\u003e\n&nbsp; &nbsp; stringClass = (*env)-&gt;FindClass(env, \"java/lang/String\");\u003cbr /\u003e\n&nbsp; &nbsp; if(stringClass == NULL)\u003cbr /\u003e\n&nbsp; &nbsp; &nbsp; &nbsp; return NULL;\u003cbr /\u003e\n\u003cbr /\u003e\n&nbsp; &nbsp; nameList = (*env)-&gt;NewObjectArray(env, 10, stringClass, NULL);\u003cbr /\u003e\n&nbsp; &nbsp; if(nameList == NULL)\u003cbr /\u003e\n&nbsp; &nbsp; &nbsp; &nbsp; return NULL;\u003cbr /\u003e\n\u003cbr /\u003e\n&nbsp; &nbsp; printf(\"enter 10 names\\n\");\u003cbr /\u003e\n&nbsp; &nbsp; for(i = 0; i &lt; 10; i++)\u003cbr /\u003e\n&nbsp; &nbsp; {\u003cbr /\u003e\n&nbsp; &nbsp; &nbsp; &nbsp; scanf(\"%s\", buf);\u003cbr /\u003e\n\u003cbr /\u003e\n&nbsp; &nbsp; &nbsp; &nbsp; /* construct new String */\u003cbr /\u003e\n&nbsp; &nbsp; &nbsp; &nbsp; name = (*env)-&gt;NewStringUTF(env, buf);\u003cbr /\u003e\n&nbsp; &nbsp; &nbsp; &nbsp; if(name == NULL)\u003cbr /\u003e\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return NULL;\u003cbr /\u003e\n\u003cbr /\u003e\n&nbsp; &nbsp; &nbsp; &nbsp; /* insert String to array */\u003cbr /\u003e\n&nbsp; &nbsp; &nbsp; &nbsp; (*env)-&gt;SetObjectArrayElement(env, nameList, i, (jobject)name);\u003cbr /\u003e\n\u003cbr /\u003e\n&nbsp; &nbsp; &nbsp; &nbsp; /* delete local reference */\u003cbr /\u003e\n&nbsp; &nbsp; &nbsp; &nbsp; (*env)-&gt;DeleteLocalRef(env, name);\u003cbr /\u003e\n&nbsp; &nbsp; }\u003cbr /\u003e\n\u003cbr /\u003e\n&nbsp; &nbsp; return nameList;\u003cbr /\u003e\n}\u003c/div\u003e\n",
      "author": {
        "id": "16293106081577528993",
        "displayName": "Vindy",
        "url": "https://www.blogger.com/profile/16293106081577528993",
        "image": {
          "url": "//www.blogger.com/img/blogger_logo_round_35.png"
        }
      },
      "replies": {
        "totalItems": "0",
        "selfLink": "https://www.googleapis.com/blogger/v3/blogs/4213915415549125978/posts/8944155074612105394/comments"
      },
      "labels": [
        "etc",
        "garbage collector",
        "Java",
        "JNI",
        "memory leak",
        "object"
      ],
      "etag": "\"dGltZXN0YW1wOiAxNTMwNzYwNzI5NjYxCm9mZnNldDogLTI1MjAwMDAwCg\""
    },
    {
      "kind": "blogger#post",
      "id": "8630725259879553340",
      "blog": {
        "id": "4213915415549125978"
      },
      "published": "2018-06-22T05:45:00-07:00",
      "updated": "2018-07-04T20:21:45-07:00",
      "url": "http://lablk.blogspot.com/2018/06/jni-jni-c-java.html",
      "selfLink": "https://www.googleapis.com/blogger/v3/blogs/4213915415549125978/posts/8630725259879553340",
      "title": "[JNI] JNI로 C와 Java 연동하기",
      "content": "\u003ch2\u003e\n개요\u003c/h2\u003e\n\u003cbr /\u003e\nJava를 사용하면 하드웨어나 OS의 대부분 기능을  제한 없이 사용할 수 있지만 그래도 C와 같은 저수준의 언어보다 섬세할 수는 없다. 이를 해소하기 위해 Java와 C/C++ 사이에 인터페이스를 제공하는 것이 JNI(Java Native Interface)이다.\u003cbr /\u003e\n\u003cbr /\u003e\n주로 JNI는 다음과 같은 이유 로 사용된다.\u003cbr /\u003e\n1. 이미 C/C++로 작성된 라이브러리를 Java에서 활용하기 위해\u003cbr /\u003e\n2. 처리속도 향상을 위해\u003cbr /\u003e\n3. 하드웨어나 OS의 기능 중 Java에서 아직 제공하지 않는 기능을 사용하기 위해\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cbr /\u003e\n\u003ch2\u003e\n참고 자료\u003c/h2\u003e\n\u003cbr /\u003e\n\u003ca href=\"http://barbie.uta.edu/~jli/Resources/Resource%20Provisoning&amp;Performance%20Evaluation/85.pdf\"\u003eThe Java Native Interface: Programmer's Guide and Specification\u003c/a\u003e\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cbr /\u003e\n\u003ch2\u003e\n개발 과정\u003c/h2\u003e\n\u003cbr /\u003e\n\u003ch3\u003e\n1. Java에서 native method 선언\u003c/h3\u003e\n\u003cbr /\u003e\n먼저 Java에서 native method를 선언한다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv style=\"background-color: #bbbbbb; font-stretch: normal; font-variant-east-asian: normal; font-variant-numeric: normal; line-height: normal; overflow: auto; padding: 5px;\"\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003epackage helloJNI;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003epublic class HelloJNI\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e{\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; static\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; {\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; System.loadLibrary(\"hellojni\");\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; }\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-size: 14px; white-space: pre;\"\u003e\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; public native String printHello(String message);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-size: 14px; white-space: pre;\"\u003e\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; public static void main(String[] args)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; {\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; HelloJNI helloJNI = new HelloJNI();\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(\"Hello, from \" + helloJNI.printHello(\"Java\")&nbsp;+ \".\");\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; }\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cbr /\u003e\nnative method는 \"native\" 키워드로 선언할 수 있으며, abstract method처럼 내용을 구현하지 않고 세미콜론 으로 끝낸다.\u003cbr /\u003e\n\u003cbr /\u003e\nnative method는 런타임에 C로 작성된 공유 라이브러리의 함수를 호출하여 동작하므로 공유 라이브러리 파일이 필요하다. 이것은 System.loadLibrary() 메소드를 통해 이루어질 수 있으며, 인자로 공유 라이브러리의 이름이 들어간다.\u003cbr /\u003e\n위의 예에서 공유 라이브러리 이름은 \"hellojni\"이며, 이에 해당하는 공유 라이 브러리 파일의 이름은 Windows에서 \"hellojni.dll\"이고, Linux에서 \"libhellojni.so\"이다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cbr /\u003e\n\u003ch3\u003e\n2. Header file 생성하기\u003c/h3\u003e\n\u003cbr /\u003e\nC로 JNI를 통해 Java에 제공할 함수를 만들기 전에, Java에서 이해할 수 있는 함수 프로토타입이 선언된 헤더 파일을 생성해야 한다.\u003cbr /\u003e\n헤더 파일은 JDK 내에 포함된 실행 파일인 javah를 통해 생성할 수 있다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003ca href=\"http://blog.naver.com/PostView.nhn?blogId=matoker&amp;logNo=220515287208&amp;categoryNo=7&amp;parentCategoryNo=0&amp;viewDate=&amp;currentPage=1&amp;postListTopCurrentPage=1&amp;from=postView\"\u003eeclipse를 사용하여 간단히 javah를 사용하는  방법\u003c/a\u003e도 있지만 여기서는 명령행에서 사용하는 방법을 소개한다.\u003cbr /\u003e\n\u003cbr /\u003e\njavah는 간 단히 다음과 같이 사용할 수 있다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv style=\"background-color: #bbbbbb; color: black; font: 14px &quot;courier new&quot;; overflow: auto; padding: 5px;\"\u003e\n&gt; javah.exe [패키지명].[클래스명]\u003c/div\u003e\n\u003cbr /\u003e\n만약 이 명령어를 호출하는 디렉토리에 컴파일된 Java 패키지가 없는 경우에는 다음과 같이 경로를 지정해줄 수 있다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv style=\"background-color: #bbbbbb; color: black; font: 14px &quot;courier new&quot;; overflow: auto; padding: 5px;\"\u003e\n&gt; javah.exe -classpath .;[경로] [패키지명].[클래스명]\u003c/div\u003e\n\u003cbr /\u003e\n경로에는 eclipse로 개발하는 경우 프로젝트의 bin 디렉토리의 경로를 입력하면 된다.\u003cbr /\u003e\n\u003cbr /\u003e\n\".;\"는 .class 파일을 검색할 디렉토리에 현재 디렉토리를 추가한다는 의미로 여 기서는 없어도 무방하다. 여러 디렉토리에 대해 검색하고 싶은 경우 여러 경로를 세미콜론으로 구분하면 된다.\u003cbr /\u003e\n\u003cbr /\u003e\n그 밖에 다른 유용한 옵션은 \u003ca href=\"https://docs.oracle.com/javase/8/docs/technotes/tools/unix/javah.html\"\u003e여기\u003c/a\u003e를 참고하자.\u003cbr /\u003e\n\u003cbr /\u003e\n이번 예에서는 다음과 같이 헤더 파일 을 생성하였다. (eclipse project의 bin 디렉토리 내에서 실행)\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv style=\"background-color: #bbbbbb; color: black; font: 14px &quot;courier new&quot;; overflow: auto; padding: 5px;\"\u003e\n&gt; javah.exe helloJNI.HelloJNI\u003c/div\u003e\n\u003cbr /\u003e\n이렇게 하면 현재 작업 디렉토리에 \"helloJNI_HelloJNI.h\"이라는 이름의 헤더 파일이 생성된다. [패키지명]_[클래스명].h 형식이며, 패키지 경로의 구분자 '.'은 '_'로 대체된다.\u003cbr /\u003e\n\u003cbr /\u003e\n다음은 생성된 헤더 파일이다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv style=\"background-color: #bbbbbb; font-stretch: normal; font-variant-east-asian: normal; font-variant-numeric: normal; line-height: normal; overflow: auto; padding: 5px;\"\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e/* DO NOT EDIT THIS FILE - it is machine generated */\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e#include &lt;jni.h&gt;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e/* Header for class helloJNI_HelloJNI */\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e#ifndef _Included_helloJNI_HelloJNI\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e#define _Included_helloJNI_HelloJNI\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e#ifdef __cplusplus\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eextern \"C\" {\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e#endif\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e/*\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp;* Class:&nbsp; &nbsp; &nbsp;helloJNI_HelloJNI\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp;* Method:&nbsp; &nbsp; printHello\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp;* Signature: (Ljava/lang/String;)Ljava/lang/String;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp;*/\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eJNIEXPORT jstring JNICALL Java_helloJNI_HelloJNI_printHello\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; (JNIEnv *, jobject, jstring);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e#ifdef __cplusplus\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e}\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e#endif\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e#endif\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cbr /\u003e\n여기에 선언된 \"Java_helloJNI_HelloJNI_printHello()\" 함수를  구현하면 된다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cbr /\u003e\n\u003ch3\u003e\n3. C언어로 JNI를 통해 Java에 제공할 함수 구현\u003c/h3\u003e\n\u003cbr /\u003e\n이렇게 구현했다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv style=\"background-color: #bbbbbb; font-stretch: normal; font-variant-east-asian: normal; font-variant-numeric: normal; line-height: normal; overflow: auto; padding: 5px;\"\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e#include &lt;stdio.h&gt;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e#include &lt;jni.h&gt;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e#include \"helloJNI_HelloJNI.h\"\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eJNIEXPORT jstring JNICALL Java_helloJNI_HelloJNI_printHello\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; (JNIEnv *env, jobject obj, jstring message)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e{\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; const char* msg = NULL;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; char* buf = \"C world\";\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; msg = (*env)-&gt;GetStringUTFChars(env, message, NULL);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; if(msg == NULL)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; return NULL; /* error occurred */\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; printf(\"Hello, from %s.\\n\", msg);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; (*env)-&gt;ReleaseStringUTFChars(env, message, msg);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; return (*env)-&gt;NewStringUTF(env, buf);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cbr /\u003e\n\"jni.h\" 파일을 include해야 하며, 이전 순서에서 생성한 헤더 파일도 include 해야 한다.\u003cbr /\u003e\n\u003cbr /\u003e\n위의 예제는 인자로 받은 String을 출력한 다음 다른 String을 return한다.\u003cbr /\u003e\n\u003cbr /\u003e\nC에서 String을 포함한 Java object를 다루는 방법은 \u003ca href=\"http://lablk.blogspot.com/2018/07/jni.html\"\u003e다음 글\u003c/a\u003e에서 설명한다.\u003cbr /\u003e\n\u003cbr /\u003e\n이제 빌드하여 공유 라 이브러리 파일을 생성하자\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cbr /\u003e\n\u003ch3\u003e\n4. 공유 라이브러리 빌드 및 실행\u003c/h3\u003e\n\u003cbr /\u003e\n음 그냥 빌드해서 공유 라이브러리를 생성하면 된다. 방법은 다양하다.\u003cbr /\u003e\n플랫폼에 따라 Visual studio를 사용해도 되고 mingw나 gcc를 사용해도 된다.\u003cbr /\u003e\n\u003cbr /\u003e\n그러나 Java의 범용성을 활용하기 위해서는 여러 플랫폼에서, 또는 한 플랫폼에서 여러 플랫폼을 타겟으로 빌드하는 환경을 만들어 놓는 것이 좋다.\u003cbr /\u003e\n그래서 여기서도 \u003ca href=\"https://cmake.org/\"\u003eCMake\u003c/a\u003e를 사용할 것이다.\u003cbr /\u003e\n\u003cbr /\u003e\nCMake를 사용하면 단 한번의 빌드 형상 정의를 통해 \u003ca href=\"http://lablk.blogspot.com/2017/07/project-build-cmake-windows-linux.html\"\u003e여러 플랫폼에서 빌드\u003c/a\u003e할 수도 있고 \u003ca href=\"http://lablk.blogspot.com/2017/10/build-system-cmake-x8664-linux-arm-linux.html\"\u003e크로스 컴파일을 통해 다른 플랫폼을 타겟으로 빌드\u003c/a\u003e할 수 있다.\u003cbr /\u003e\n\u003cbr /\u003e\n즉 이 글에서 정의한 빌드 형상(CMakeLists.txt) 파일 하나로 다양한 타겟의 공유 라이브러리를 쉽게 만들 수 있다.\u003cbr /\u003e\n\u003cbr /\u003e\n이 예제에서 CMakeLists.txt 파일은 다음과 같다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv style=\"background-color: #bbbbbb; font-stretch: normal; font-variant-east-asian: normal; font-variant-numeric: normal; line-height: normal; overflow: auto; padding: 5px;\"\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003ecmake_minimum_required(VERSION 2.8.4)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eif(WIN32)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; set(JDK_ROOT \"D:/Program/Java/jdk1.8.0_172\")\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eelseif(UNIX)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; set(JDK_ROOT \"/usr/lib/jvm/java-8-openjdk-amd64\")\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eendif()\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003einclude_directories(${JDK_ROOT}/include)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eif(WIN32)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; include_directories(${JDK_ROOT}/include/win32)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eelseif(UNIX)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; include_directories(${JDK_ROOT}/include/linux)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eendif()\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eadd_library(hellojni SHARED hellojni.c)\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cbr /\u003e\n\"JDK_ROOT\" 변수의 값은 각자 환경에 맞게 수정하자.\u003cbr /\u003e\n시스템에 설치된 JDK의 루트 디렉토리로 설정하면 된다.\u003cbr /\u003e\n\u003cbr /\u003e\n이 파일을 통해 빌드 형상은 다음과 같의 정의된다.\u003cbr /\u003e\n1. JDK 내에 있는 include 디렉토리와 그 안에 win32 디렉토리를 include directory 경로에 추가한다.\u003cbr /\u003e\n2. 공유 라이브러리로 빌드하기 위해 add_library()에 SHARED 옵션을 사용한다.\u003cbr /\u003e\n3. 이 때 공유 라이브러리 이름은 Java에서 System.loadLibrary() 메소드의 인자로 사용한 문자열과 동일해야 한다.\u003cbr /\u003e\n\u003cbr /\u003e\nVisual studio 등을 사용할 때에도  위와 같이 설정하면 된다. 즉 include directory 경로 추가와, 공유 라이브러리 빌드 설정을 하면 된다.\u003cbr /\u003e\n\u003cbr /\u003e\n공유 라이브러리가 생성되었으면 이제 실행하면 된다.\u003cbr /\u003e\n단, 실행하기 전에 공유 라이브러리 파일 의 경로는 각자 환경에 맞게 잘 설정해야 한다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv style=\"background-color: #bbbbbb; font-stretch: normal; font-variant-east-asian: normal; font-variant-numeric: normal; line-height: normal; overflow: auto; padding: 5px;\"\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eHello, from C world.\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eHello, from Java.\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\n",
      "author": {
        "id": "16293106081577528993",
        "displayName": "Vindy",
        "url": "https://www.blogger.com/profile/16293106081577528993",
        "image": {
          "url": "//www.blogger.com/img/blogger_logo_round_35.png"
        }
      },
      "replies": {
        "totalItems": "1",
        "selfLink": "https://www.googleapis.com/blogger/v3/blogs/4213915415549125978/posts/8630725259879553340/comments"
      },
      "labels": [
        "cmake",
        "etc",
        "Java",
        "javah",
        "JNI"
      ],
      "etag": "\"dGltZXN0YW1wOiAxNTMwNzYwOTA1NDkzCm9mZnNldDogLTI1MjAwMDAwCg\""
    },
    {
      "kind": "blogger#post",
      "id": "4371940007614111118",
      "blog": {
        "id": "4213915415549125978"
      },
      "published": "2018-05-03T22:45:00-07:00",
      "updated": "2018-06-22T01:19:48-07:00",
      "url": "http://lablk.blogspot.com/2018/05/font-display-programming-for-embedded.html",
      "selfLink": "https://www.googleapis.com/blogger/v3/blogs/4213915415549125978/posts/4371940007614111118",
      "title": "Font display programming for embedded devices (pixel-based)",
      "content": "디스플레이에 문자열을 픽셀 단위로 처리하여 출력하는 알고리즘을 개발하기 위해 먼저 각 문자별로 비트맵이 정의된 C 배열이 필요하다.\u003cbr /\u003e\n\u003cbr /\u003e\nC 배열을 구하기 위해 열심히 구글링을 하던 중 \u003ca href=\"https://www.mikroe.com/glcd-font-creator\"\u003e굉장한 것\u003c/a\u003e을 찾았다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003ca href=\"https://www.mikroe.com/glcd-font-creator\"\u003ehttps://www.mikroe.com/glcd-font-creator\u003c/a\u003e\u003cbr /\u003e\n\u003cbr /\u003e\nGLCD Font Creator라는 프로그램인데, 시스템에 정의된 폰트와 스타일, 크기를 설정하면 그에 맞는 C 배열을 생성해 준다..\u003cbr /\u003e\n\u003cbr /\u003e\n사용법은 쉬우니까 패스.. 하고 생성된 C 배열의 구조는 다음과 같다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://4.bp.blogspot.com/-gA_VF0c1VcI/WuvQNayXuRI/AAAAAAAAAnw/bvJ4H7HsXxArGvVs5kMEOl3-RbH7YCIawCLcBGAs/s1600/20180504_121423.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"220\" data-original-width=\"944\" height=\"149\" src=\"https://4.bp.blogspot.com/-gA_VF0c1VcI/WuvQNayXuRI/AAAAAAAAAnw/bvJ4H7HsXxArGvVs5kMEOl3-RbH7YCIawCLcBGAs/s640/20180504_121423.png\" width=\"640\" /\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003c/div\u003e\n\u003cbr /\u003e\nC 배열에서 각각의 줄은 줄 끝에 주석으로 설명된 문자에 해당하는 비트맵이고 순서는 아스키 코드를 따 른다.\u003cbr /\u003e\n\u003cbr /\u003e\n각각의 줄에서 가장 첫 번째 바이트는 개별 비트맵의 가로 픽셀 길이를 의미한다. 모든 문자의 비트맵은 가로, 세로가 고정된 고정길이로 정의되는데 (그림 예시에서는 7x15 픽셀), 가변길이로 출력하고 싶은 경우 첫 번째 바이트를 보고 비트맵의 특정 부분만 추려서 출력하면 된다.\u003cbr /\u003e\n\u003cbr /\u003e\n나머지는 비트맵인데, 왼쪽 위부터 세로로 8비트씩 한 바이트이고 바이트 index는 수직 방향이 우선이다. 한 바이트의 8개 픽셀에서 가장 위쪽 픽셀이 LSB이고 아래쪽 픽셀이 MSB이다.\u003cbr /\u003e\n\u003cbr /\u003e\n예를 들어 'a' 문자의 경우 첫 번째 바이트인 0x06은 비 트맵 중 폰트가 정의된 가로 픽셀 수를 의미하고 나머지는 다음과 같이 비트맵 데이터를 담고 있다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://3.bp.blogspot.com/-iqhdud3C6XE/WuvlQ1oQlZI/AAAAAAAAAoQ/LLB2ZmXW4K0F9idoyNUABxqKqacKiFrKACLcBGAs/s1600/20180504_134433.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"22\" data-original-width=\"884\" height=\"14\" src=\"https://3.bp.blogspot.com/-iqhdud3C6XE/WuvlQ1oQlZI/AAAAAAAAAoQ/LLB2ZmXW4K0F9idoyNUABxqKqacKiFrKACLcBGAs/s640/20180504_134433.png\" width=\"640\" /\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://4.bp.blogspot.com/-Otfb6vz1-5M/WuvlF4GqAYI/AAAAAAAAAoM/0-kbAZLgqZoDSgLGd9AQpS5mg-Js8_w5QCLcBGAs/s1600/%25EA%25B7%25B8%25EB%25A6%25BC1.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"1109\" data-original-width=\"715\" height=\"320\" src=\"https://4.bp.blogspot.com/-Otfb6vz1-5M/WuvlF4GqAYI/AAAAAAAAAoM/0-kbAZLgqZoDSgLGd9AQpS5mg-Js8_w5QCLcBGAs/s320/%25EA%25B7%25B8%25EB%25A6%25BC1.png\" width=\"204\" /\u003e\u003c/a\u003e\u003c/div\u003e\n따라서 byte 3의 경우 0x06이고 이 값이 배열의 5번째 바이트(index=4)에 존재하는 것을 알 수 있다.\u003cbr /\u003e\n\u003cbr /\u003e\n비트맵이 정의된 C 배열을 얻었으니 이제 이 배열을 해석하여 특정 픽셀에 값을 써 주는 알고리즘을 개발하면 된 다. 다음은 그 코드이다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv style=\"background-color: #bbbbbb; font-stretch: normal; font-variant-east-asian: normal; font-variant-numeric: normal; line-height: normal; overflow: auto; padding: 5px;\"\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;; font-size: 14px;\"\u003e#define LCD_WIDTH 256\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e#define LCD_HEIGHT 64\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eint draw_string(const char* string, int base_x, int base_y,\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; const unsigned char* font, int width, int height, int start, int end,\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; int spacing, int line_spacing, int monospace)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e{\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; int x, y;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; int cur_x, cur_y, char_x, char_y;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; int height_byte = (height + 7) / 8;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; int entry_size = height_byte * width + 1;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; int index;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; int bitmap_width;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; const unsigned char* bitmap = NULL;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; unsigned char data;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; unsigned char bit_index;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; unsigned char bit;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; char_x = base_x;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; char_y = base_y;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; cur_x = char_x;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; cur_y = char_y;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; if((cur_y + height) &gt; LCD_HEIGHT)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; return -1; /* out of LCD size */\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; if(width &lt;= -spacing)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; return -1; /* invalid argument */\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; while(*string != '\\0')\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; {\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; /* new line character */\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; if(*string == '\\n')\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; {\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; char_x = base_x;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cur_x = char_x;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; char_y += height + line_spacing;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cur_y = char_y;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; string++;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; continue;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; }\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cdiv\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; if(*string &lt; start || *string &gt; end)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; {\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; string++;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; continue; /* invalid character */\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; }\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cbr /\u003e\n\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; /* get character data */\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; index = *string - start;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; if(monospace)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bitmap_width = width;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; else\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bitmap_width = font[entry_size * index];\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; bitmap = &amp;(font[entry_size * index + 1]);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; if(char_x + bitmap_width &gt; LCD_WIDTH)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return -1; /* out of LCD size */\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; /* draw character */\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; for(x = 0; x &lt; bitmap_width; x++)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; {\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for(y = 0; y &lt; height_byte; y++)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; data = bitmap[x * height_byte + y];\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for(bit_index = 0; bit_index &lt; 8; bit_index++)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if((y * 8 + bit_index) &gt;= height)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break; /* skip unused bits */\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bit = data &amp; 0x01;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; data &gt;&gt;= 1;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /*\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* TODO: Implement draw_pixel() function\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* for your target system.\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*/\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; draw_pixel(cur_x, cur_y, bit);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cur_y++;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cur_x++;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cur_y = char_y;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; }\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; /* process the next character */\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; char_x += bitmap_width + spacing;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; cur_x = char_x;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; string++;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; }\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; return 0;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cbr /\u003e\n이 코드를 사용하기 위해서는 다음을 수정해야 한다.\u003cbr /\u003e\n1) LCD_WIDTH와 LCD_HEIGHT를 타겟 디스플레이의 가로/세로 픽셀 길이로 정의\u003cbr /\u003e\n2) draw_pixel() 함수를 각자 타겟 디스플레이에 맞는 코드로 구현\u003cbr /\u003e\n\u003cbr /\u003e\nint draw_pixel(x, y, bit) 함수는 디스플레이의 왼쪽 위를 (0, 0) 좌표로 정의했을 때 (x, y) 위치에 해당하는 픽셀을 bit 값으로 설정하는 함수이다. bit는 0 또는 1이 입력된다.\u003cbr /\u003e\n\u003cbr /\u003e\n이 코드의 파라미터에 대한 설명은 다음과 같다.\u003cbr /\u003e\n1) string: 출력할 문자 열 ('\\0' 문자로 끝나는)\u003cbr /\u003e\n2) base_x: 문자열의 왼쪽 위 점이 위치할 디스플레이 상의 x 좌표\u003cbr /\u003e\n3) base_y: 문자열의 왼쪽 위 점이 위치할 디스플레이 상의 y 좌표\u003cbr /\u003e\n4) font: 앞에서 GLCD font creator를 통해 생성한 C 배열\u003cbr /\u003e\n5) width: 폰트의 가로 픽셀 길이\u003cbr /\u003e\n6) height: 폰트의 세로 픽셀 길이\u003cbr /\u003e\n7) start: 폰트에 정의된 시작 문자의 아스키 코드\u003cbr /\u003e\n8) end: 폰트에 정의된 끝 문자의 아스키 코 드\u003cbr /\u003e\n9) spacing: 자간\u003cbr /\u003e\n10) line_spacing: 줄 간격\u003cbr /\u003e\n11) monospace: 1이면 고정길이 출력 0이면 가변길이 출력\u003cbr /\u003e\n\u003cbr /\u003e\n파라미터가 많은데, 기존 코드에서는 구조체를 통해 함수를 호출하도록 하였으나 설명을 위해 하나하나 풀어서 작성하였다.\u003cbr /\u003e\n\u003cbr /\u003e\nwidth, height는 폰트의 가로 및 세로 픽셀 수이다. GLCD font creator에서 생성하는 C 배열은 가변길이 폰트라도 크기가 가장 큰 문자를 기준으로 가로 및 세로 픽셀 수가 모든 문자에 대해 고정으로 정의된다. (빈 부분의 픽셀 값은 0)\u003cbr /\u003e\n\u003cbr /\u003e\nstart, end의 경우 GLCD font creator에서 C 배열을 생성할 때 메모리 절약을 위해 사용하지 않는 아스키 코드 구간을 삭제하고 비트맵을 생성하도록 설정할 수 있는데, 여기서 생성하도록 설정된 아스키 코드 구간의 첫 문자가 start이고, 마지막 문자가 end이다.\u003cbr /\u003e\n기본 설정의 경우 32 ~ 127 구간의 C 배열을 생성하므로 start=32, end=127을 지정하면 된다.\u003cbr /\u003e\n\u003cbr /\u003e\nspacing, line_spacing: 무려 자간과 줄간격도 설정할 수 있도록 구현하였다.\u003cbr /\u003e\nmonospace: 가변길이 문자열을 고정길이로 출력할 경우 어색하기 때문에 monospace 파라미터를 사용하여 어떤 방식으로 출력할지 설정하도 록 하였다.\u003cbr /\u003e\n\u003cbr /\u003e\n위 함수의 사용 예는 다음과 같다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv style=\"background-color: #bbbbbb; color: black; font: 14px &quot;courier new&quot;; overflow: auto; padding: 5px;\"\u003e\n\u003cdiv style=\"font-family: &quot;Malgun Gothic&quot;; font-size: medium;\"\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003edraw_string(\"Hello\\nWorld!\", 0, 0,&nbsp;\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"font-family: &quot;courier new&quot;; font-size: 14px;\"\u003econsolas7x15, 7, 15, 32, 127,&nbsp;\u003c/span\u003e\u003cspan style=\"font-family: &quot;courier new&quot;; font-size: 14px;\"\u003e0, 0, 1);\u003c/span\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cbr /\u003e",
      "author": {
        "id": "16293106081577528993",
        "displayName": "Vindy",
        "url": "https://www.blogger.com/profile/16293106081577528993",
        "image": {
          "url": "//www.blogger.com/img/blogger_logo_round_35.png"
        }
      },
      "replies": {
        "totalItems": "0",
        "selfLink": "https://www.googleapis.com/blogger/v3/blogs/4213915415549125978/posts/4371940007614111118/comments"
      },
      "labels": [
        "display",
        "embedded",
        "etc",
        "font",
        "LCD",
        "OLED",
        "pixel-based",
        "string"
      ],
      "etag": "\"dGltZXN0YW1wOiAxNTI5NjU1NTg4NzI5Cm9mZnNldDogLTI1MjAwMDAwCg\""
    },
    {
      "kind": "blogger#post",
      "id": "8976096087732791401",
      "blog": {
        "id": "4213915415549125978"
      },
      "published": "2018-02-14T05:21:00-08:00",
      "updated": "2018-05-03T22:49:23-07:00",
      "url": "http://lablk.blogspot.com/2018/02/ethercat-igh-ethercat-master-stack-api.html",
      "selfLink": "https://www.googleapis.com/blogger/v3/blogs/4213915415549125978/posts/8976096087732791401",
      "title": "[EtherCAT] IgH EtherCAT Master Stack API 분석 예제",
      "content": "\u003ch2\u003e\n\u003cspan style=\"font-size: large;\"\u003e[준비물]\u003c/span\u003e\u003c/h2\u003e\n\u003cdiv\u003e\n\u003cbr /\u003e\n- IgH EtherCAT Master Stack 1.5.2와 Xenomai OS가 설치된 제어기\u003c/div\u003e\n\u003cdiv\u003e\n- 위 플랫폼에 대한 개발환경 (툴체인, 라이브러리 등)\u003c/div\u003e\n\u003cdiv\u003e\n- Digital I/O EtherCAT Slave 장치\u003c/div\u003e\n\u003cdiv\u003e\n\u003cbr /\u003e\n\u003cbr /\u003e\u003c/div\u003e\n\u003cdiv\u003e\n\u003ch2\u003e\n\u003cspan style=\"font-size: large;\"\u003e[참고자료]\u003c/span\u003e\u003c/h2\u003e\n\u003c/div\u003e\n\u003cdiv\u003e\n\u003cbr /\u003e\n- \u003ca href=\"https://etherlab.org/en/ethercat/\"\u003eIgH EtherCAT Master Stack 라이브러리\u003c/a\u003e\u003c/div\u003e\n\u003cdiv\u003e\n- \u003ca href=\"https://etherlab.org/download/ethercat/ethercat-1.5.2.pdf\"\u003eIgH EtherCAT Master Stack 1.5.2 Documentation\u003c/a\u003e\u003c/div\u003e\n\u003cbr /\u003e\n\u003cbr /\u003e\n\u003ch2\u003e\n\u003cspan style=\"font-size: large;\"\u003e[예제코드]\u003c/span\u003e\u003c/h2\u003e\n\u003cbr /\u003e\n\u003cdiv style=\"background-color: #bbbbbb; font-stretch: normal; font-variant-east-asian: normal; font-variant-numeric: normal; line-height: normal; overflow: auto; padding: 5px;\"\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e#include &lt;stdio.h&gt;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e#include &lt;stdlib.h&gt;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e#include &lt;signal.h&gt;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e#include &lt;native/task.h&gt;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e#include &lt;native/timer.h&gt;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e#include &lt;ecrt.h&gt;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e#define INTERVAL 1000000\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003estatic void rt_task_proc(void *arg);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003estatic void sigint_handler(int sig);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e/* PDO list to use in application */\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eunsigned int slave0_6000_01;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eunsigned int slave0_6000_01_bit;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eunsigned int slave0_7010_01;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eunsigned int slave0_7010_01_bit;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003estatic ec_pdo_entry_reg_t pdo_entry_reg[] = {\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; {0, 0, 0x0, 0x0, 0x6000, 1, &amp;slave0_6000_01, &amp;slave0_6000_01_bit},\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; {0, 0, 0x0, 0x0, 0x7010, 1, &amp;slave0_7010_01, &amp;slave0_7010_01_bit},\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; {}\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e};\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003estatic ec_master_t* master = NULL;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003estatic ec_domain_t* domain = NULL;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003estatic uint8_t* domain_pd = NULL;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003estatic int alive = 1;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eint main(int argc, char** argv)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e{\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; int i;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; int ret = 0;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; ec_master_info_t master_info;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; ec_slave_info_t* slave_info_list = NULL;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; ec_slave_config_t* slave = NULL;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; int slave_count = 0;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; RT_TASK* rt_task_plc = NULL;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; /* signal handler registration */\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; signal(SIGINT, sigint_handler);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; /* configure master */\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; master = ecrt_request_master(0);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; if(master == NULL)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; {\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; printf(\"EtherCAT master request failed!\\n\");\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; return 1;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; }\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; domain = ecrt_master_create_domain(master);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; if(domain == NULL)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; {\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; printf(\"EtherCAT domain creation failed!\\n\");\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; ret = 1;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; goto CLEANUP;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; }\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; ret = ecrt_master(master, &amp;master_info);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; if(ret != 0)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; {\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; printf(\"EtherCAT master information request failed!\\n\");\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; ret = -ret;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; goto CLEANUP;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; }\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; /* allocate momory for slave information */\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; slave_count = master_info.slave_count;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; slave_info_list = (ec_slave_info_t*)malloc(sizeof(ec_slave_info_t) * slave_count);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; /* configure slaves */\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; for(i = 0; i &lt; slave_count; i++)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; {\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; ret = ecrt_master_get_slave(master, i, &amp;slave_info_list[i]);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; if(ret != 0)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; {\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; printf(\"EtherCAT slave information request failed!\\n\");\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ret = -ret;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; goto CLEANUP;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; }\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; slave = ecrt_master_slave_config(master, 0, i, slave_info_list[i].vendor_id,\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; slave_info_list[i].product_code);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; if(slave == NULL)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; {\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; printf(\"EtherCAT slave configuration failed!\\n\");\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ret = 1;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; goto CLEANUP;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; }\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; }\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; /* setup PDO registration array */\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; for(i = 0; pdo_entry_reg[i].index != 0; i++)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; {\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; if(pdo_entry_reg[i].position &lt; slave_count)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; {\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pdo_entry_reg[i].vendor_id =\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; slave_info_list[pdo_entry_reg[i].position].vendor_id;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pdo_entry_reg[i].product_code =\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; slave_info_list[pdo_entry_reg[i].position].product_code;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; }\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; }\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; /* get PDO entry list */\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; ret = ecrt_domain_reg_pdo_entry_list(domain, pdo_entry_reg);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; if(ret != 0)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; {\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; printf(\"EtherCAT PDO registration failed!\\n\");\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; goto CLEANUP;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; }\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; /* create real-time periodic task */\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; rt_task_plc = (RT_TASK*)malloc(sizeof(RT_TASK));\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; ret = rt_task_create(rt_task_plc, \"rt_task_plc\", 0, 50, T_JOINABLE);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; if(ret != 0)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; {\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; printf(\"Real-time task creation failed!\\n\");\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; goto CLEANUP;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; }\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; /* activate EtherCAT master */\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; ret = ecrt_master_set_send_interval(master, INTERVAL);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; if(ret != 0)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; {\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; printf(\"EtherCAT setting send interval failed!\\n\");\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; ret = -ret;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; goto CLEANUP;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; }\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; ret = ecrt_master_activate(master);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; if(ret != 0)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; {\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; printf(\"EtherCAT master activation failed!\\n\");\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; ret = -ret;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; goto CLEANUP;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; }\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; /* get PDO domain pointer */\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; domain_pd = ecrt_domain_data(domain);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; if(domain_pd == NULL)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; {\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; printf(\"EtherCAT mapping process data failed!\\n\");\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; ret = 1;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; goto CLEANUP;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; }\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; /* start real-time periodic task */\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; ret = rt_task_start(rt_task_plc, &amp;rt_task_proc, rt_task_plc);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; if(ret != 0)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; {\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; printf(\"Real-time task start failed!\\n\");\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; goto CLEANUP;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; }\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; rt_task_join(rt_task_plc);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eCLEANUP :\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; if(slave_info_list != NULL)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; free(slave_info_list);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; if(rt_task_plc != NULL)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; free(rt_task_plc);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; if(master != NULL)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; ecrt_release_master(master);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; return ret;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e}\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003estatic void rt_task_proc(void *arg)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e{\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; int sw, led;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; int count = 0;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; RT_TASK* rt_task_plc = (RT_TASK*)arg;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; RTIME current_time = rt_timer_read();\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; /* set real-time task timer */\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; rt_task_set_periodic(rt_task_plc, current_time + INTERVAL,\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; rt_timer_ns2ticks(INTERVAL));\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; while(alive)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; {\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"font-family: &quot;courier new&quot;; font-size: 14px;\"\u003e/* retrieve */\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; ecrt_master_receive(master);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; ecrt_domain_process(domain);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;; font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; sw = EC_READ_BIT(domain_pd + slave0_6000_01, slave0_6000_01_bit);\u003c/span\u003e\u003c/div\u003e\n\u003cdiv style=\"background-color: #bbbbbb; font-stretch: normal; font-variant-east-asian: normal; font-variant-numeric: normal; line-height: normal; overflow: auto; padding: 5px;\"\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; /* computation */\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; if(sw)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; {\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if(++count &gt;= 500)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; led = !led;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; count = 0;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; }\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; else\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; {\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; led = 0;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; count = 0;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; }\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"font-family: &quot;courier new&quot;; font-size: 14px;\"\u003e/* publish */\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;; font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; EC_WRITE_BIT(domain_pd + slave0_7010_01, slave0_7010_01_bit, led);\u003c/span\u003e\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; ecrt_domain_queue(domain);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; ecrt_master_send(master);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; /* wait until next period */\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; rt_task_wait_period(NULL);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; }\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e}\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003estatic void sigint_handler(int sig)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e{\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; alive = 0;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cbr /\u003e\n\u003cbr /\u003e\n\u003ch2\u003e\n\u003cspan style=\"font-size: large;\"\u003e[설명]\u003c/span\u003e\u003c/h2\u003e\n\u003cbr /\u003e\n&nbsp; 본 예제 코드는 slave 장치의 스위치 (OD index=0x6000, subindex=0x1로 정의된)가 on 상태인 경우 LED (OD index=0x7010, subindex=0x1로 정의된)를 1Hz (0.5초마다 출력값 토글)하는 응용이다.\u003cbr /\u003e\n&nbsp; IgH와 같은 역할을 하는 \u003ca href=\"http://lablk.blogspot.kr/2017/07/ethercat-soem-ethercat.html\"\u003eSOEM을 활용한 마스터 예제 코드\u003c/a\u003e와 비교해서 IgH가 더 성능도 좋고 기능 도 많기 때문인지 예제 코드의 양이 많은 편이다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cbr /\u003e\n\u003ch3\u003e\n[마 스터 초기화]\u003c/h3\u003e\n\u003cbr /\u003e\n\u003cdiv style=\"background-color: #bbbbbb; font-stretch: normal; font-variant-east-asian: normal; font-variant-numeric: normal; line-height: normal; overflow: auto; padding: 5px;\"\u003e\n\u003cdiv style=\"color: black; font-family: &quot;courier new&quot;; font-size: 14px; font-style: normal; font-variant-caps: normal; font-variant-ligatures: normal; font-weight: normal;\"\u003e\n1&nbsp; master = ecrt_request_master(0);\u003c/div\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e2&nbsp; domain = ecrt_master_create_domain(master);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e3&nbsp; ecrt_master(master, &amp;master_info);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e4&nbsp; slave_count = master_info.slave_count;\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cbr /\u003e\n&nbsp; 마스터 초기화는 현재 프로그램이 실행되고 있는 마스터 장치에서 0 번 EtherCAT 인터페이스에 대한 오프젝트(master)를 받아온 후 그에 대한 도메인 오프젝트(domain)을 받는 것으로 이루어진다.  마스터 오브젝트(master)가 마스터 장치를 의미한다면, 도메인(domain)은 주기적으로 통신할 데이터(PDO)들을 의미한다.\u003cbr /\u003e\n&nbsp; 마스터 오브젝트의 필드는 IgH 라이브러리 내에서만 접근할 수 있도록 감추어져 있기 때문에 슬레이브 장치의 수 등 정보를 알기 위해서는 3 line 처럼 마스터 오브젝트의 정보를 받아와야 한다. 슬레이브 장치의 수는 4 line과 같이 알 수 있다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cbr /\u003e\n\u003ch3\u003e\n[슬레이브 초기화]\u003c/h3\u003e\n\u003cbr /\u003e\n\u003cdiv style=\"background-color: #bbbbbb; font-stretch: normal; line-height: normal; overflow: auto; padding: 5px;\"\u003e\n\u003cdiv style=\"font-family: &quot;courier new&quot;; font-size: 14px;\"\u003e\n1&nbsp; for(i = 0; i &lt; slave_count; i++)\u003c/div\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e2&nbsp; {\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e3&nbsp; &nbsp; &nbsp;&nbsp;ecrt_master_get_slave(master, i, &amp;slave_info_list[i]);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e4&nbsp; &nbsp; &nbsp; ecrt_master_slave_config(master, 0, i, slave_info_list[i].vendor_id,\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;slave_info_list[i].product_code);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e5&nbsp; }\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cbr /\u003e\n&nbsp; 슬레이브 초기화를 위한 함수 ecrt_master_slave_config()는 초기화하려는 슬레이브의 Vendor ID와 Product code를 필요로 한다. 해당 정보는 ecrt_master_get_slave() 함수로 얻어올 수 있다.\u003cbr /\u003e\n&nbsp; 본 예제와 같이 슬레이브로부터 필요한 정보를 받아와서 초기화를 하는 방법이 있고 마스터에서 미리 설정된 정보를 이 용하여 직접 초기화 하는 방법이 있다. 전자의 경우 슬레이브 내에 설정 정보들이 저장되어 있는 SII(Slave Information Interface)로부터 마스터가 초기화에 필요한 정보를 읽어 초기화가 이루어지며, 후자의 경우 사용자가 특정 슬레이브의 정보가 XML 포맷으로 정의된 ESI 파일을 마스터 프로그램(예를 들어 TwinCAT과 같은 프로그램)을 통해 입력하여 초기화가 이루어진다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cbr /\u003e\n\u003ch3\u003e\n[입출력(PDO) 설정]\u003c/h3\u003e\n\u003cbr /\u003e\n\u003cdiv style=\"background-color: #bbbbbb; font-stretch: normal; line-height: normal; overflow: auto; padding: 5px;\"\u003e\n\u003cdiv style=\"font-family: &quot;courier new&quot;; font-size: 14px;\"\u003e\n1&nbsp; static ec_pdo_entry_reg_t pdo_entry_reg[] = {\u003c/div\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e2&nbsp; &nbsp; &nbsp; {0, 0, 0x0, 0x0, 0x6000, 1, &amp;slave0_6000_01, &amp;slave0_6000_01_bit},\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e3&nbsp; &nbsp; &nbsp; {0, 0, 0x0, 0x0, 0x7010, 1, &amp;slave0_7010_01, &amp;slave0_7010_01_bit},\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e4&nbsp;&nbsp;\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; {}\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e5&nbsp; };\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e6&nbsp;&nbsp;ecrt_domain_reg_pdo_entry_list(domain, pdo_entry_reg);\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cbr /\u003e\n&nbsp; 주기적으로 통신할 데이터를  정의하는 입출력 설정은 ec_pdo_entry_reg_t 타입의 구조체와 ecrt_domain_reg_pdo_entry_list() 함수가 사용된다. ec_pdo_entry_reg_t 구조체는 ecrt.h 파일에 다음과 같이 정의되어 있다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv style=\"background-color: #bbbbbb; font-stretch: normal; line-height: normal; overflow: auto; padding: 5px;\"\u003e\n\u003cdiv\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003etypedef struct {\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; uint16_t alias;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; uint16_t position;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; uint32_t vendor_id;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; uint32_t product_code;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; uint16_t index;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; uint8_t subindex;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; unsigned int *offset;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; unsigned int *bit_position;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e} ec_pdo_entry_reg_t;\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cbr /\u003e\n&nbsp; alias와 position을 어떤 슬레이브 장치인지 특정한다. vendor_id와 product_code는 특정한 슬레이브에 대한 정보로, 해당 슬레이브의 정보와 일치해야 한다. 예제 코드에서는 ecrt_master_get_slave() 함수를 통해 얻은 정보를 이용하여 이 값을 초기화하는 코드가 있다. index와 subindex는 특정한 슬레이브 장치에서 통신할 OD(Object Dictionary)의 index와 subindex를  의미한다. 이와 같은 정보를 입력한 구조체의 배열을 2~3 line과 같이 정의한 후 ecrt_domain_reg_pdo_entry_list() 함수를 호출하면 해당 구조체의 마지막 두 필드에 PDO 엔트리의 byte offset과 bit position이 저장된다. 이 값은 추후에 입출력을 위해 사 용된다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cbr /\u003e\n\u003ch3\u003e\n[마스터 활성화]\u003c/h3\u003e\n\u003cbr /\u003e\n\u003cdiv style=\"background-color: #bbbbbb; font-stretch: normal; line-height: normal; overflow: auto; padding: 5px;\"\u003e\n\u003cdiv style=\"font-family: &quot;courier new&quot;; font-size: 14px;\"\u003e\n1&nbsp; ecrt_master_set_send_interval(master, INTERVAL);\u003c/div\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e2&nbsp; ecrt_master_activate(master);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e3&nbsp; domain_pd = ecrt_domain_data(domain);\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cbr /\u003e\n&nbsp; 마스 터가 통신할 주기를 설정하고 활성화한다. 통신할 주기는 ecrt_master_set_send_interval() 함수를 통해 설정할 수 있으며, 두  번째 인자에 주기를 나노초 단위로 입력하면 된다. 이후에 ecrt_master_activate() 함수를 통해 마스터 장치를 활성화한다. 활성화 이후에는 실시간 context로 전환되며 malloc()이나 대부분의 IgH 라이브러리 함수들을 포함하는 비실시간 함수들의 사용은 제한된다. 이 함수가 호출된 이후에는 실시간 함수들만 사용할 수 있다.\u003cbr /\u003e\n&nbsp; ecrt_domain_data() 함수는 인자로 전달된 도메인에 대한 데이터 필드의 포인터를 받아온다. 이 값도 추후에 입출력을 위해 사용된다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cbr /\u003e\n\u003ch3\u003e\n[실행 단계]\u003c/h3\u003e\n\u003cbr /\u003e\n\u003cdiv style=\"background-color: #bbbbbb; font-stretch: normal; line-height: normal; overflow: auto; padding: 5px;\"\u003e\n\u003cdiv style=\"font-family: &quot;courier new&quot;; font-size: 14px;\"\u003e\n1&nbsp; &nbsp;while(alive)\u003cbr /\u003e\n2&nbsp; &nbsp;{\u003cbr /\u003e\n3&nbsp; &nbsp; &nbsp; &nbsp;/* retrieve */\u003cbr /\u003e\n4&nbsp; &nbsp; &nbsp; &nbsp;ecrt_master_receive(master);\u003cbr /\u003e\n5&nbsp; &nbsp; &nbsp; &nbsp;ecrt_domain_process(domain);\u003cbr /\u003e\n6&nbsp; &nbsp; &nbsp; &nbsp;sw = EC_READ_BIT(domain_pd + slave0_6000_01, slave0_6000_01_bit);\u003cbr /\u003e\n7\u003cbr /\u003e\n8&nbsp; &nbsp; &nbsp; &nbsp;/* computation */\u003cbr /\u003e\n9&nbsp; &nbsp; &nbsp; &nbsp;/* write some computation code... */\u003cbr /\u003e\n10\u003cbr /\u003e\n11&nbsp; &nbsp; &nbsp; /* publish */\u003cbr /\u003e\n12&nbsp; &nbsp; &nbsp;&nbsp;EC_WRITE_BIT(domain_pd + slave0_7010_01, slave0_7010_01_bit, led);\u003cbr /\u003e\n13&nbsp; &nbsp; &nbsp;&nbsp;ecrt_domain_queue(domain);\u003cbr /\u003e\n14&nbsp; &nbsp; &nbsp;&nbsp;ecrt_master_send(master);\u003cbr /\u003e\n15\u003cbr /\u003e\n16&nbsp; &nbsp; &nbsp; /* wait until next period */\u003cbr /\u003e\n17&nbsp; }\u003c/div\u003e\n\u003c/div\u003e\n\u003cbr /\u003e\n&nbsp; 실행 단계에서는 ecrt_master_set_send_interval() 함수를 통해 설정한 주기마다 [retrieve] - [computation] - [publish]를 반복한다.\u003cbr /\u003e\n&nbsp; retrieve에서는 ecrt_mater_receive() 함수와 ecrt_domain_process() 함수가 기본적으로 필요하며, 앞서 입출력 설정에서 입력으로 설정한 데이터를 슬레이브로부터 받아오는 것으로 구성된다. 데이터를 받아오는 기능은 ecrt.h에 매크로로 정의되어 있으며 데이터의 타입별로 매크로가 따로 정의되어 있다. (EC_READ_BIT  등) 이 매크로를 사용할 때 마스터 활성화 단계에서 얻은 도메인 데이터 필드의 포인터(domain_pd)와 함께 입출력 설정에서 ecrt_domain_reg_pdo_entry_list() 함수를 통해 얻은 byte offset과 bit position이 사용된다.\u003cbr /\u003e\n&nbsp; computation에서는 retrieve에서 읽어오는 데이터를 토대로 publish에서 쓸 데이터를 계산한다. 이 위치의 코드는 응용에 따라 자유롭게 구 성된다.\u003cbr /\u003e\n&nbsp; publish에서는 retrieve와 반대로 먼저&nbsp;EC_WRITE_BIT 등의 매크로로 도메인 데이터 필드 에 값을 쓴 다음&nbsp;ecrt_domain_queue() 함수와&nbsp;ecrt_master_send() 함수를 통해 그 값을 슬레이브로 출력한다.",
      "author": {
        "id": "16293106081577528993",
        "displayName": "Vindy",
        "url": "https://www.blogger.com/profile/16293106081577528993",
        "image": {
          "url": "//www.blogger.com/img/blogger_logo_round_35.png"
        }
      },
      "replies": {
        "totalItems": "4",
        "selfLink": "https://www.googleapis.com/blogger/v3/blogs/4213915415549125978/posts/8976096087732791401/comments"
      },
      "labels": [
        "EtherCAT",
        "IgH"
      ],
      "etag": "\"dGltZXN0YW1wOiAxNTI1NDEyOTYzMTEzCm9mZnNldDogLTI1MjAwMDAwCg\""
    },
    {
      "kind": "blogger#post",
      "id": "7649952515219114933",
      "blog": {
        "id": "4213915415549125978"
      },
      "published": "2017-10-27T23:55:00-07:00",
      "updated": "2018-11-08T18:01:27-08:00",
      "url": "http://lablk.blogspot.com/2017/10/build-system-windows-arm-standalone.html",
      "selfLink": "https://www.googleapis.com/blogger/v3/blogs/4213915415549125978/posts/7649952515219114933",
      "title": "[Build System] Windows 플랫폼에서 ARM Linux 크로스 컴파일 환경 Standalone으로 구성",
      "content": "IDE 등으로 배포하기 위해 Windows 플랫폼에서 ARM 크로스 컴파일 환경을 Standalone으로 구성하려고 한다.\u003cbr /\u003e\n\u003cbr /\u003e\n준비물 : mingw32 arm linux toolchain, cmake, mingw32-make\u003cbr /\u003e\n\u003cbr /\u003e\n우선 작업을 위한 폴더를 만든다. 나는 D: 바로 아래에 arm이라는 폴더를 만들었다.\u003cbr /\u003e\n��� 폴더 안에 다음 링크를 통해 받은 파일을 저장한다.\u003cbr /\u003e\n\u003cbr /\u003e\nmingw32 arm liunux 툴체인 :&nbsp;\u003ca href=\"https://releases.linaro.org/components/toolchain/binaries/latest-7/arm-linux-gnueabihf/\"\u003ehttps://releases.linaro.org/components/toolchain/binaries/latest-7/arm-linux-gnueabihf/\u003c/a\u003e\u003cbr /\u003e\n이 사이트에서 \"gcc-linaro-[버전]-[날짜]-i686-mingw32_arm-linux-gnueabihf.tar.xz\" 파일을 다운받는다.\u003cbr /\u003e\n(다른 버전은 \u003ca href=\"https://developer.arm.com/open-source/gnu-toolchain\"\u003e여기\u003c/a\u003e 참조)\u003cbr /\u003e\n\u003cbr /\u003e\ncmake :&nbsp;\u003ca href=\"https://cmake.org/files/v3.10/cmake-3.10.0-rc3-win64-x64.zip\"\u003ehttps://cmake.org/files/v3.10/cmake-3.10.0-rc3-win64-x64.zip\u003c/a\u003e\u003cbr /\u003e\n(역시 다른 버전을 원하면 \u003ca href=\"https://cmake.org/download/\"\u003e여기\u003c/a\u003e 참조)\u003cbr /\u003e\n\u003cbr /\u003e\nStandalone으로 구성하기 위해 cmake 는 zip 파일로 내려받는다.\u003cbr /\u003e\n\u003cbr /\u003e\n위 파일들을 받고 압축을 해제한다.\u003cbr /\u003e\n\u003cbr /\u003e\nmingw32-make는 정식 경로에서 Standalone으로 받는 방법은 찾지 못했다.\u003cbr /\u003e\n대신에 다음 사이트에서 mingw-get을 받아 설치한 후 mingw32-make.exe를 가져오는 방법을 사용하였다.\u003cbr /\u003e\n\u003ca href=\"https://sourceforge.net/projects/mingw/\"\u003ehttps://sourceforge.net/projects/mingw/\u003c/a\u003e\u003cbr /\u003e\n\u003cbr /\u003e\n설치 후 mingw-get GUI에서 다음과 같이 mingw32-make를 선택해서 설치하거나\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://2.bp.blogspot.com/-4CpkFmNV7m4/WfQh5r8Fy-I/AAAAAAAAAkw/h0tEDf_Z3FU8sbEoAr1oiAUvMJpairXYACLcBGAs/s1600/20171028_151946.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"129\" data-original-width=\"354\" src=\"https://2.bp.blogspot.com/-4CpkFmNV7m4/WfQh5r8Fy-I/AAAAAAAAAkw/h0tEDf_Z3FU8sbEoAr1oiAUvMJpairXYACLcBGAs/s1600/20171028_151946.png\" /\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cbr /\u003e\n명령 프롬프트에서 설치할 수 있다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv style=\"background-color: #bbbbbb; color: black; font: 14px &quot;courier new&quot;; overflow: auto; padding: 5px;\"\u003e\n&gt; C:\\MinGW\\bin\\mingw-get.exe install mingw32-make\u003c/div\u003e\n\u003cbr /\u003e\n어떤 방법으로든 설치하고 나면 MinGW 설치 폴더 아래 bin 폴더에 다음과 같은 파일이 생길 것이다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://4.bp.blogspot.com/-eDhbgMb4tUc/WfQjUW2lnYI/AAAAAAAAAk8/wJ63WhWx5KkrL4H5duAXx_GBC0v1NhB8gCLcBGAs/s1600/20171028_152714.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"131\" data-original-width=\"193\" src=\"https://4.bp.blogspot.com/-eDhbgMb4tUc/WfQjUW2lnYI/AAAAAAAAAk8/wJ63WhWx5KkrL4H5duAXx_GBC0v1NhB8gCLcBGAs/s1600/20171028_152714.png\" /\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cbr /\u003e\n이  파일들 중 mingw-get.exe를 제외한 5개 파일을 작업 폴더에 mingw32-make라는 폴더를 만들고 그 아래에 복사한다.\u003cbr /\u003e\n\u003cbr /\u003e\n준비물을 모두 챙기고 나면 작업 폴더는 다음과 같이 될 것이다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://2.bp.blogspot.com/-y549hKoWzUc/WfQkd6Ni0nI/AAAAAAAAAlQ/jxrzK6q2zlsqsu-3ljCwoLBuOawflzPeQCLcBGAs/s1600/20171028_153209.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"95\" data-original-width=\"384\" src=\"https://2.bp.blogspot.com/-y549hKoWzUc/WfQkd6Ni0nI/AAAAAAAAAlQ/jxrzK6q2zlsqsu-3ljCwoLBuOawflzPeQCLcBGAs/s1600/20171028_153209.png\" /\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cbr /\u003e\n이제 지난 글에서처럼 툴체인을  명시한&nbsp;toolchain.arm.cmake 파일을 작성한다.\u003cbr /\u003e\n\u003cbr /\u003e\ntoolchain.arm.cmake\u003cbr /\u003e\n\u003cdiv style=\"background-color: #bbbbbb; font-stretch: normal; font-variant-numeric: normal; line-height: normal; overflow: auto; padding: 5px;\"\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eSET(CMAKE_SYSTEM_NAME Linux)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eSET(CMAKE_SYSTEM_PROCESSOR arm)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eSET(COMPILER_ROOT \"D:/arm/gcc-linaro-7.1.1-2017.08-i686-mingw32_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-\")\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eSET(CMAKE_C_COMPILER ${COMPILER_ROOT}gcc.exe)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eSET(CMAKE_CXX_COMPILER ${COMPILER_ROOT}g++.exe)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eSET(CMAKE_LINKER ${COMPILER_ROOT}ld.exe)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eSET(CMAKE_NM ${COMPILER_ROOT}nm.exe)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eSET(CMAKE_OBJCOPY ${COMPILER_ROOT}objcopy.exe)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eSET(CMAKE_OBJDUMP ${COMPILER_ROOT}objdump.exe)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eSET(CMAKE_RANLIB ${COMPILER_ROOT}ranlib.exe)\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cbr /\u003e\n경로는 각자 환경에 맞게 수정하면 된다. 단, 절대경로를 사용해야 한다.\u003cbr /\u003e\n파일 구분자를 백슬레시(\\)로 입력하면 바보같은 cmake가 자꾸 escape character로 처리하고 못알아먹겠다고 징징거리니  슬레시(/)로 입력하도록 하자.\u003cbr /\u003e\n\u003cbr /\u003e\n이제 역시 또 간단한 예제 소스코드를 작성한다.\u003cbr /\u003e\n\u003cbr /\u003e\nmain.c\u003cbr /\u003e\n\u003cdiv style=\"background-color: #bbbbbb; font-stretch: normal; line-height: normal; overflow: auto; padding: 5px;\"\u003e\n\u003cspan style=\"color: #222222; font-family: &quot;courier new&quot;; font-size: 14px;\"\u003e#include &lt;stdio.h&gt;\u003c/span\u003e\u003cbr /\u003e\n\u003cbr style=\"color: #222222; font-family: &quot;courier new&quot;; font-size: 14px;\" /\u003e\n\u003cspan style=\"color: #222222; font-family: &quot;courier new&quot;; font-size: 14px;\"\u003eint main()\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"color: #222222; font-family: &quot;courier new&quot;; font-size: 14px;\"\u003e{\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"color: #222222; font-family: &quot;courier new&quot;; font-size: 14px;\"\u003e&nbsp; &nbsp; printf(\"hello arm!!\\n\");\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"color: #222222; font-family: &quot;courier new&quot;; font-size: 14px;\"\u003e&nbsp; &nbsp; return 0;\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"color: #222222; font-family: &quot;courier new&quot;; font-size: 14px;\"\u003e}\u003c/span\u003e\u003c/div\u003e\n\u003cbr /\u003e\nCMakeLists.txt\u003cbr /\u003e\n\u003cdiv style=\"background-color: #bbbbbb; font-stretch: normal; line-height: normal; overflow: auto; padding: 5px;\"\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eADD_EXECUTABLE(App main.c)\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cbr /\u003e\n이제 준비는  모두 끝났으니 빌드하면 된다.\u003cbr /\u003e\n\u003cbr /\u003e\n매번 명령어를 입력하기는 귀찮으니 배치 파일을 만들자\u003cbr /\u003e\n\u003cbr /\u003e\nbuild.bat\u003cbr /\u003e\n\u003cdiv style=\"background-color: #bbbbbb; font-stretch: normal; line-height: normal; overflow: auto; padding: 5px;\"\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003emkdir build\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003ecd build\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\"../cmake-3.10.0-rc3-win64-x64/bin/cmake.exe\" -DCMAKE_MAKE_PROGRAM=\"D:/arm/mingw32-make/mingw32-make.exe\" -DCMAKE_TOOLCHAIN_FILE=../toolchain.arm.cmake -G \"MinGW Makefiles\" ..\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\"../cmake-3.10.0-rc3-win64-x64/bin/cmake.exe\"&nbsp; --build .\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e@echo off\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eset /p str=completed\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cbr /\u003e\n준비물들이랑 빌드 결과물이 섞이면 곤란하니 build 폴더를 생성하고 그 아래에 빌드 결과물이 생성되도록 하였다.\u003cbr /\u003e\n\u003cbr /\u003e\n세 번째 명령어가 매우 긴데, 다음과 같은 일을 한다.\u003cbr /\u003e\n\u003cbr /\u003e\n-DCMAKE_MAKE_PROGRAM : mingw32-make.exe의 경로를 지정한다.(절대경로) 각자 환경에 맞게 수정하자.\u003cbr /\u003e\nmingw-get을 설치하고 나서는 이 옵션이 없어도 cmake가 알아서 mingw32-make의 경로를 찾아내는데, mingw-get 없이 Standalone으로 실행하 려면 이 옵션이 반드시 필요하다.\u003cbr /\u003e\n\u003cbr /\u003e\n-DCMAKE_TOOLCHAIN_FILE : 툴체인을 명시한 toolchain.arm.cmake 파일의 경로를 지정한다. 역시 각자 환경에 맞게 수정하자.\u003cbr /\u003e\n\u003cbr /\u003e\n-G \"MinGW Makefiles\" : mingw32-make.exe가 이해할 수 있는 Makefile을 생성한다.\u003cbr /\u003e\n\u003cbr /\u003e\nbuild.bat 파일을 실행하고 나면 build 폴더 안에 App이라는 파일이 생성되었을 것이다.\u003cbr /\u003e\n\u003cbr /\u003e\n이것을 ARM Linux 플랫폼에 옮기고 실행하면!\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://2.bp.blogspot.com/-NPobrtw7MHE/WfQpHcqp3eI/AAAAAAAAAlk/AxsscZ6j12MtMYuuv2BJ6L5cu-v3JUjWgCLcBGAs/s1600/20171028_155120.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"202\" data-original-width=\"575\" src=\"https://2.bp.blogspot.com/-NPobrtw7MHE/WfQpHcqp3eI/AAAAAAAAAlk/AxsscZ6j12MtMYuuv2BJ6L5cu-v3JUjWgCLcBGAs/s1600/20171028_155120.png\" /\u003e\u003c/a\u003e\u003c/div\u003e\n",
      "author": {
        "id": "16293106081577528993",
        "displayName": "Vindy",
        "url": "https://www.blogger.com/profile/16293106081577528993",
        "image": {
          "url": "//www.blogger.com/img/blogger_logo_round_35.png"
        }
      },
      "replies": {
        "totalItems": "0",
        "selfLink": "https://www.googleapis.com/blogger/v3/blogs/4213915415549125978/posts/7649952515219114933/comments"
      },
      "labels": [
        "arm",
        "cmake",
        "cross compiler",
        "etc",
        "mingw",
        "srandalone",
        "windows"
      ],
      "etag": "\"dGltZXN0YW1wOiAxNTQxNzI4ODg3NDg0Cm9mZnNldDogLTI4ODAwMDAwCg\""
    },
    {
      "kind": "blogger#post",
      "id": "8331478078970705177",
      "blog": {
        "id": "4213915415549125978"
      },
      "published": "2017-10-26T19:33:00-07:00",
      "updated": "2017-10-31T19:20:24-07:00",
      "url": "http://lablk.blogspot.com/2017/10/build-system-cmake-x8664-linux-arm-linux.html",
      "selfLink": "https://www.googleapis.com/blogger/v3/blogs/4213915415549125978/posts/8331478078970705177",
      "title": "[Build System] cmake에서 크로스 컴파일러(툴체인) 사용하기 (x86_64 Linux에서 ARM Linux 실행 파일 빌드)",
      "content": "\u003ca href=\"http://lablk.blogspot.kr/2017/07/project-build-cmake-windows-linux.html\"\u003e지난 번\u003c/a\u003e에는 cmake를 사용하여 서로 다른 플랫폼에서 빌드하는 방법을 알아보았는데, 이번엔 한 플랫폼에서 다른 플랫폼  실행 파일을 크로스 컴파일하는 방법을 알아볼 것이다.\u003cbr /\u003e\n\u003cbr /\u003e\n예제로, 데스크탑 PC(x86_64 Ubuntu 16.04)에서 ARM Linux 실행 파일을 크로스 컴파일해 볼 것이다.\u003cbr /\u003e\n\u003cdiv\u003e\n\u003cbr /\u003e\u003c/div\u003e\n\u003cdiv\u003e\n먼저 툴체인을 받아와서 압축을 해제한다.\u003c/div\u003e\n\u003cdiv\u003e\n\u003cbr /\u003e\u003c/div\u003e\n\u003cdiv style=\"background-color: #bbbbbb; color: black; font: 14px &quot;courier new&quot;; overflow: auto; padding: 5px;\"\u003e\n# wget&nbsp;https://releases.linaro.org/components/toolchain/binaries/latest/arm-linux-gnueabihf/gcc-linaro-7.1.1-2017.08-x86_64_arm-linux-gnueabihf.tar.xz\u003cbr /\u003e\n# tar xf gcc-linaro-7.1.1-2017.08-x86_64_arm-linux-gnueabihf.tar.xz\u003c/div\u003e\n\u003cbr /\u003e\n\u003cdiv\u003e\n원하는 버전의 다른 ARM 툴체인은&nbsp;\u003ca href=\"https://developer.arm.com/open-source/gnu-toolchain\"\u003e여기\u003c/a\u003e서 찾아볼 수 있다.\u003c/div\u003e\n\u003cdiv\u003e\n\u003cbr /\u003e\u003c/div\u003e\n\u003cdiv\u003e\n이제 toolchain.arm.cmake 라는 파일을 만들어서 내용을 다음과 같이 채워 넣는다.\u003c/div\u003e\n\u003cdiv\u003e\n\u003cbr /\u003e\ntoolchain.arm.cmake\u003c/div\u003e\n\u003cdiv style=\"background-color: #bbbbbb; font-stretch: normal; font-variant-numeric: normal; line-height: normal; overflow: auto; padding: 5px;\"\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eSET(CMAKE_SYSTEM_NAME Linux)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eSET(CMAKE_SYSTEM_PROCESSOR arm)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eSET(COMPILER_ROOT /root/cmake/gcc-linaro-7.1.1-2017.08-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;; font-size: 14px;\"\u003eSET(CMAKE_C_COMPILER ${COMPILER_ROOT}gcc)\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eSET(CMAKE_CXX_COMPILER ${COMPILER_ROOT}g++)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eSET(CMAKE_LINKER ${COMPILER_ROOT}ld)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eSET(CMAKE_NM ${COMPILER_ROOT}nm)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eSET(CMAKE_OBJCOPY ${COMPILER_ROOT}objcopy)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eSET(CMAKE_OBJDUMP ${COMPILER_ROOT}objdump)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eSET(CMAKE_RANLIB ${COMPILER_ROOT}ranlib)\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cdiv\u003e\n\u003cbr /\u003e\u003c/div\u003e\n\u003cdiv\u003e\n이 파일은 툴체인의 경로(절대경로)를 명시하는 역할을 한다. 나중에 cmake를 실행할 때 이 파일을 입력해서 빌드 시 사용할 툴체인을 지정해줄 수 있다.\u003cbr /\u003e\n첫 번째 줄의 COMPILER_ROOT 변수는 각자 환경에 맞게 수정하면 된다. 여기서는 앞에서 받아온 ARM 툴체인의 실행파일(gcc, ld 등)들의 경로를 지정하였다.\u003c/div\u003e\n\u003cdiv\u003e\n\u003cbr /\u003e\u003c/div\u003e\n\u003cdiv\u003e\n예제로 빌드할 소스코드(main.c)와 cmake 파일(CMakeLists.txt)를 작성하자.\u003c/div\u003e\n\u003cdiv\u003e\n\u003cbr /\u003e\nmain.c\u003cbr /\u003e\n\u003cdiv style=\"background-color: #bbbbbb; font-family: &quot;courier new&quot;; font-size: 14px; font-stretch: normal; line-height: normal; overflow: auto; padding: 5px;\"\u003e\n#include &lt;stdio.h&gt;\u003cbr /\u003e\n\u003cbr /\u003e\nint main()\u003cbr /\u003e\n{\u003cbr /\u003e\n&nbsp; &nbsp; printf(\"hello arm!\\n\");\u003cbr /\u003e\n&nbsp; &nbsp; return 0;\u003cbr /\u003e\n}\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv\u003e\n\u003cbr /\u003e\u003c/div\u003e\n\u003cdiv\u003e\nCMakeLists.txt\u003c/div\u003e\n\u003cdiv\u003e\n\u003cdiv\u003e\n\u003cdiv style=\"background-color: #bbbbbb; font-stretch: normal; line-height: normal; overflow: auto; padding: 5px;\"\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eADD_EXECUTABLE(App main.c)\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv\u003e\n\u003cbr /\u003e\u003c/div\u003e\n\u003cdiv\u003e\n이제 다음 명령어를 입력하면 빌드된다!\u003cbr /\u003e\n\u003cdiv\u003e\n\u003cbr /\u003e\u003c/div\u003e\n\u003cdiv\u003e\n\u003cdiv\u003e\n\u003cdiv style=\"background-color: #bbbbbb; font-stretch: normal; line-height: normal; overflow: auto; padding: 5px;\"\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e# cmake&nbsp;-DCMAKE_TOOLCHAIN_FILE=toolchain.arm.cmake .\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e# make\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv\u003e\n\u003cbr /\u003e\u003c/div\u003e\n\u003cdiv\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv\u003e\nApp 이라는 실행파일이 생성되었을 것이다. file 명령어를 통해 확인해 보면 잘 컴파일 된 것을 확인할 수 있다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv style=\"text-align: center;\"\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://2.bp.blogspot.com/-2l7ZK_Ay8JY/WfKa3-0cH1I/AAAAAAAAAkU/xRiQ7RUvaRQwyCPZhQi1XvANs7dvBQRUwCLcBGAs/s1600/%25EC%258A%25A4%25ED%2581%25AC%25EB%25A6%25B0%25EC%2583%25B7%252C%2B2017-10-27%2B11-25-41.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"410\" data-original-width=\"732\" src=\"https://2.bp.blogspot.com/-2l7ZK_Ay8JY/WfKa3-0cH1I/AAAAAAAAAkU/xRiQ7RUvaRQwyCPZhQi1XvANs7dvBQRUwCLcBGAs/s1600/%25EC%258A%25A4%25ED%2581%25AC%25EB%25A6%25B0%25EC%2583%25B7%252C%2B2017-10-27%2B11-25-41.png\" /\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cbr /\u003e\u003c/div\u003e\n이 파일을 ARM 플랫폼으로 (여기서는 raspberry pi에) 전송한 후에 실행한 화면이다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv style=\"text-align: center;\"\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://1.bp.blogspot.com/-Fv-lVQ3mUcY/WfKbAH_-1AI/AAAAAAAAAkY/YULA5cTonBQWIyhfq2KtPOk1EggvmVwjwCLcBGAs/s1600/%25EC%258A%25A4%25ED%2581%25AC%25EB%25A6%25B0%25EC%2583%25B7%252C%2B2017-10-27%2B11-28-50.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"410\" data-original-width=\"759\" src=\"https://1.bp.blogspot.com/-Fv-lVQ3mUcY/WfKbAH_-1AI/AAAAAAAAAkY/YULA5cTonBQWIyhfq2KtPOk1EggvmVwjwCLcBGAs/s1600/%25EC%258A%25A4%25ED%2581%25AC%25EB%25A6%25B0%25EC%2583%25B7%252C%2B2017-10-27%2B11-28-50.png\" /\u003e\u003c/a\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n",
      "author": {
        "id": "16293106081577528993",
        "displayName": "Vindy",
        "url": "https://www.blogger.com/profile/16293106081577528993",
        "image": {
          "url": "//www.blogger.com/img/blogger_logo_round_35.png"
        }
      },
      "replies": {
        "totalItems": "0",
        "selfLink": "https://www.googleapis.com/blogger/v3/blogs/4213915415549125978/posts/8331478078970705177/comments"
      },
      "labels": [
        "arm",
        "cmake",
        "cross compiler",
        "etc",
        "linux",
        "toolchain"
      ],
      "etag": "\"dGltZXN0YW1wOiAxNTA5NTAyODI0MzYwCm9mZnNldDogLTI1MjAwMDAwCg\""
    },
    {
      "kind": "blogger#post",
      "id": "3859887237904800748",
      "blog": {
        "id": "4213915415549125978"
      },
      "published": "2017-10-25T16:54:00-07:00",
      "updated": "2018-11-08T17:53:13-08:00",
      "url": "http://lablk.blogspot.com/2017/10/vr-unity-bluetooth-controller_25.html",
      "selfLink": "https://www.googleapis.com/blogger/v3/blogs/4213915415549125978/posts/3859887237904800748",
      "title": "[VR] Unity : Bluetooth Controller를 사용하여 캐릭터 컨트롤하기",
      "content": "이번엔 \u003ca href=\"https://lablk.blogspot.com/2017/10/vr-unity-vr-support.html\"\u003e지난 글\u003c/a\u003e과 \u003ca href=\"https://lablk.blogspot.kr/2017/10/vr-unity-bluetooth-controller.html\"\u003e저번 글\u003c/a\u003e의 내용을 합쳐서 Bluetooth Controller를 통해 1인칭 캐릭터를 컨트롤할 수 있는 VR앱을 만들 것이다.\u003cbr /\u003e\n\u003cbr /\u003e\n배경까지 다 만들기는 귀찮으니까 Assets Store에서 \u003ca href=\"https://www.assetstore.unity3d.com/kr/#!/content/15\"\u003e\u003cstrike\u003e괜찮은 꽁짜 프로젝트\u003c/strike\u003e\u003c/a\u003e를 받아온다.\u003cbr /\u003e\n- 2018년 11월 현재 위 프로젝트는 서비스되지 않아서 받아올 수 없다. 다른 프로젝트를 사용해도 무방하니 적당한 것을 찾아보자\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://3.bp.blogspot.com/-7igGtQvYuHU/WfCqTwGUi6I/AAAAAAAAAjg/Bb5j77WMahc-3NDwyLaozy1cIwauboCzQCLcBGAs/s1600/20171024_224745.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"394\" data-original-width=\"802\" height=\"314\" src=\"https://3.bp.blogspot.com/-7igGtQvYuHU/WfCqTwGUi6I/AAAAAAAAAjg/Bb5j77WMahc-3NDwyLaozy1cIwauboCzQCLcBGAs/s640/20171024_224745.png\" width=\"640\" /\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cbr /\u003e\n필요없는 부분은 다 지우고 먼저 1인칭 캐릭터 역할을 할 GameObject를 적당한 위치에 적 당한 크기로 하나 만든다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://3.bp.blogspot.com/-4SiwNpp5Zxs/WfCrE7j4oTI/AAAAAAAAAjs/ujjh_bB110cpMDb3bxqbjtEg4pjEgYSkwCLcBGAs/s1600/20171026_001652.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"574\" data-original-width=\"964\" height=\"381\" src=\"https://3.bp.blogspot.com/-4SiwNpp5Zxs/WfCrE7j4oTI/AAAAAAAAAjs/ujjh_bB110cpMDb3bxqbjtEg4pjEgYSkwCLcBGAs/s640/20171026_001652.png\" width=\"640\" /\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cbr /\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://3.bp.blogspot.com/-UGkMemqklbk/WfCrCde-M4I/AAAAAAAAAjo/tvq6OvQyKuYCTxSG6DgOZZgYR4Sj0B_vQCLcBGAs/s1600/20171026_001706.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"514\" data-original-width=\"550\" src=\"https://3.bp.blogspot.com/-UGkMemqklbk/WfCrCde-M4I/AAAAAAAAAjo/tvq6OvQyKuYCTxSG6DgOZZgYR4Sj0B_vQCLcBGAs/s1600/20171026_001706.png\" /\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cbr /\u003e\n벽을(심지어 바닥도!) 뚫고 다니면 안 되니까 Capsule Collider를 추가하고 물리엔진과 상호작용(중력이라던가 다른 물체와 충돌이라던가)을 할 수 있도록 Rigidbody를 추가한다.\u003cbr /\u003e\n중요한게 Rigidbody에서 Constraints안에 Freeze Rotation의 모든 축을 체크해야 한다. 물리엔진에 의해 캐릭터가 회전하지 않도록 제약을 걸어 두는 것으로, 이거 안 해주면 Capsule Collider의 곡면 때문에 캐릭터가 자기 맘대로 막 굴러다닌다.\u003cbr /\u003e\n\u003cbr /\u003e\n그 다음엔 캐릭터 GameObject의 하위 Object로 포함되도록 Camera를 추가한다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://4.bp.blogspot.com/-cE6TBXoS16g/WfCucBAHS1I/AAAAAAAAAj8/yQu0FlZ2fm0cJI-Hnx56LGfN-XW3AzwRgCLcBGAs/s1600/20171026_003124.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"408\" data-original-width=\"343\" src=\"https://4.bp.blogspot.com/-cE6TBXoS16g/WfCucBAHS1I/AAAAAAAAAj8/yQu0FlZ2fm0cJI-Hnx56LGfN-XW3AzwRgCLcBGAs/s1600/20171026_003124.png\" /\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cbr /\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://1.bp.blogspot.com/-mzH9vSG3xfc/WfCucAJmrPI/AAAAAAAAAj4/xt75kknaWxwsek_Kf6KPXvM8UBiqT4s1wCLcBGAs/s1600/20171026_003150.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"538\" data-original-width=\"550\" src=\"https://1.bp.blogspot.com/-mzH9vSG3xfc/WfCucAJmrPI/AAAAAAAAAj4/xt75kknaWxwsek_Kf6KPXvM8UBiqT4s1wCLcBGAs/s1600/20171026_003150.png\" /\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cbr /\u003e\n위치는 적당히 잡아주면 된다.\u003cbr /\u003e\n단, 비대칭을 좋아하 는 사람이 아니면 X와 Z 좌표는 0으로 해 두자.\u003cbr /\u003e\n\u003cbr /\u003e\n이제 스크립트를 하나 추가한다. \u003ca href=\"http://wiki.unity3d.com/index.php?title=RigidbodyFPSWalker\"\u003e이거\u003c/a\u003e 참고해서 작성했다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv style=\"background-color: #bbbbbb; font-stretch: normal; font-variant-numeric: normal; line-height: normal; overflow: auto; padding: 5px;\"\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eusing System.Collections;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eusing System.Collections.Generic;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003eusing UnityEngine;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e[RequireComponent (typeof (Rigidbody))]\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e[RequireComponent (typeof (CapsuleCollider))]\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003epublic class BlueControlManager : MonoBehaviour\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e{\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;   \u003c/span\u003eprivate GameObject cameraObject;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;   \u003c/span\u003eprivate Rigidbody CharacterRigidbody;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;   \u003c/span\u003eprivate bool jumpPushed = false;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;   \u003c/span\u003e// contants\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;   \u003c/span\u003eprivate float speed = 2.2f;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;   \u003c/span\u003eprivate float gravity = 10.0f;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;   \u003c/span\u003eprivate bool grounded = false;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;   \u003c/span\u003eprivate float maxVelocityChange = 1.5f;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;   \u003c/span\u003eprivate float jumpHeight = 0.5f;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;   \u003c/span\u003eprivate Vector3 jumpVelocity;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;   \u003c/span\u003evoid Start()\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;   \u003c/span\u003e{\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;       \u003c/span\u003ecameraObject = GameObject.Find(\"Camera\");\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;       \u003c/span\u003eCharacterRigidbody = GetComponent&lt;Rigidbody&gt;();\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;       \u003c/span\u003e// From the jump height and gravity we deduce the upwards speed&nbsp;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;       \u003c/span\u003e// for the character to reach at the apex.\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;       \u003c/span\u003ejumpVelocity = new Vector3(0, Mathf.Sqrt(2 * jumpHeight * gravity), 0);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;   \u003c/span\u003e}\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-size: 14px; white-space: pre;\"\u003e\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e \u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;   \u003c/span\u003evoid Update()\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;   \u003c/span\u003e{\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;       \u003c/span\u003eif(Input.GetKeyDown(KeyCode.JoystickButton0))\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;           \u003c/span\u003ejumpPushed = true;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;   \u003c/span\u003e}\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;   \u003c/span\u003evoid FixedUpdate()\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;   \u003c/span\u003e{\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;       \u003c/span\u003eif(grounded)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;       \u003c/span\u003e{\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;           \u003c/span\u003e// get joystick data\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;           \u003c/span\u003eVector2 joystickPosition = new Vector2();\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;           \u003c/span\u003ejoystickPosition.x = Input.GetAxis(\"Horizontal\");\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;           \u003c/span\u003ejoystickPosition.y = Input.GetAxis(\"Vertical\");\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;           \u003c/span\u003ejoystickPosition = joystickPosition.normalized;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;           \u003c/span\u003e// Calculate how fast we should be moving\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;           \u003c/span\u003eVector3 targetVelocity = new Vector3(0, 0, 0);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;           \u003c/span\u003eVector3 forward = new Vector3(0, 0, 0);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;           \u003c/span\u003eVector3 right = new Vector3(0, 0, 0);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;           \u003c/span\u003eforward.x = cameraObject.transform.forward.x;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;           \u003c/span\u003eforward.z = cameraObject.transform.forward.z;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;           \u003c/span\u003eright.x = cameraObject.transform.right.x;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;           \u003c/span\u003eright.z = cameraObject.transform.right.z;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;           \u003c/span\u003eforward = forward.normalized;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;           \u003c/span\u003eright = right.normalized;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;           \u003c/span\u003etargetVelocity = forward * joystickPosition.y + right * joystickPosition.x;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;           \u003c/span\u003etargetVelocity *= speed;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;           \u003c/span\u003e// Apply a force that attempts to reach our target velocity\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;           \u003c/span\u003eVector3 velocity = CharacterRigidbody.velocity;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;           \u003c/span\u003eVector3 velocityChange = (targetVelocity - velocity);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;           \u003c/span\u003evelocityChange.x = Mathf.Clamp(velocityChange.x,\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -maxVelocityChange, maxVelocityChange);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;           \u003c/span\u003evelocityChange.z = Mathf.Clamp(velocityChange.z,\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -maxVelocityChange, maxVelocityChange);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;           \u003c/span\u003evelocityChange.y = 0;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;           \u003c/span\u003eCharacterRigidbody.AddForce(velocityChange, ForceMode.VelocityChange);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;           \u003c/span\u003e// Jump\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;           \u003c/span\u003eif(jumpPushed)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;               \u003c/span\u003eCharacterRigidbody.AddForce(jumpVelocity, ForceMode.VelocityChange);\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;       \u003c/span\u003e}\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;       \u003c/span\u003egrounded = false;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;       \u003c/span\u003ejumpPushed = false;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;   \u003c/span\u003e}\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-size: 14px; white-space: pre;\"\u003e\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e \u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;   \u003c/span\u003evoid OnCollisionStay(Collision collisionInfo)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;   \u003c/span\u003e{\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;       \u003c/span\u003eforeach(ContactPoint contact in collisionInfo.contacts)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;       \u003c/span\u003e{\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;           \u003c/span\u003eif(contact.normal.y &gt; 0.7f)\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;           \u003c/span\u003e{\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;               \u003c/span\u003egrounded = true;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;               \u003c/span\u003ebreak;\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;           \u003c/span\u003e}\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;       \u003c/span\u003e}\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e\u003cspan style=\"white-space: pre;\"\u003e&nbsp;   \u003c/span\u003e}\u003c/span\u003e\u003c/span\u003e\u003cbr /\u003e\n\u003cspan style=\"font-family: &quot;courier new&quot;;\"\u003e\u003cspan style=\"font-size: 14px;\"\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cbr /\u003e\n주요 특징\u003cbr /\u003e\n\u003cbr /\u003e\n1. UI 처리는 Update() 함수에서, 물리적 처리는 FixedUpdate() 함수에서 한다.\u003cbr /\u003e\nUpdate() 함수는 프레임마다 한 번 호출되며, 초당 프레임의 변화에 따라 호출 주기가 달라지는 반면 FixedUpdate() 함수는 호출 주기가 일정하다. Input.GetKeyDown() 함수는 버튼이 눌린 시점의 프레임에서만 true를 반환한다. 따라서 FixedUpdate()  함수에서 Input.GetKeyDown() 함수로 값을 읽어오는 경우 프레임 타이밍에 따라 버튼을 눌러도 true값을 읽지 못할 수도 있다.  반면에 물리적 처리는 호출 주기가 일정한 FixedUpdate() 함수에서 처리해야 자연스럽게 동작하며 그렇지 않고 Update() 함수에 서 처리할 경우 초당 프레임 변화에 따라 다르게 동작할 것이다.\u003cbr /\u003e\n\u003cbr /\u003e\n2. 캐릭터를 움직일 때는 rigidbody의 AddForce() 함수 사용\u003cbr /\u003e\n캐릭터를 움직이는 방법, 즉 캐릭터의 위치를 바꾸는 방법은 위치 자체를  바꾸는 방법, 속도를 바꾸는 방법, 힘(가속도)를 주는 방법의 세 가지가 있다. 위치 자체를 바꾸는 것은 캐릭터가 순간이동하는 것으로 구현될 것이며, 속도를 바꾸거나 힘을 주어야 위치가 연속적으로 변할 것이다. 힘을 주는 방법이 위치와 속도가 연속적으로 변하는 것이므로 가장 자연스럽게 동작할 것이다.\u003cbr /\u003e\n\u003cbr /\u003e\n3.&nbsp; grounded (캐릭터가 땅을 밟고 서 있는지) 판단 조건\u003cbr /\u003e\n캐릭터의 Collider가 다른 Collider와 접촉할 때 호출되는 OnCollisionStay() 함수에서 항상 grounded를 true로 바꾸도록 하면 벽과 접촉할 때에도 땅을 밟고 있다고 판단하여 벽타기가 가능하다.. 따라서 OnCollisionStay() 함수의 인자로 주어지는 Collision 정보 내에서 다른 Collider와 접촉한 방향이 옆쪽이 아닌 아래쪽 방향이 있는 경우에만 땅을 밟고 있다고 판단하게 한다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cbr /\u003e\n플레이 영상!\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ciframe allowfullscreen=\"\" class=\"YOUTUBE-iframe-video\" data-thumbnail-src=\"https://i.ytimg.com/vi/2kdmaPmbIN0/0.jpg\" frameborder=\"0\" height=\"266\" src=\"https://www.youtube.com/embed/2kdmaPmbIN0?feature=player_embedded\" width=\"320\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n",
      "author": {
        "id": "16293106081577528993",
        "displayName": "Vindy",
        "url": "https://www.blogger.com/profile/16293106081577528993",
        "image": {
          "url": "//www.blogger.com/img/blogger_logo_round_35.png"
        }
      },
      "replies": {
        "totalItems": "0",
        "selfLink": "https://www.googleapis.com/blogger/v3/blogs/4213915415549125978/posts/3859887237904800748/comments"
      },
      "labels": [
        "Bluetooth",
        "Bluetooth Controller",
        "character control",
        "Unity",
        "VR"
      ],
      "etag": "\"dGltZXN0YW1wOiAxNTQxNzI4MzkzNTM0Cm9mZnNldDogLTI4ODAwMDAwCg\""
    },
    {
      "kind": "blogger#post",
      "id": "5498721553506959918",
      "blog": {
        "id": "4213915415549125978"
      },
      "published": "2017-10-24T04:38:00-07:00",
      "updated": "2017-10-24T04:38:55-07:00",
      "url": "http://lablk.blogspot.com/2017/10/vr-unity-vr-support.html",
      "selfLink": "https://www.googleapis.com/blogger/v3/blogs/4213915415549125978/posts/5498721553506959918",
      "title": "[VR] Unity VR Support",
      "content": "VR 앱을 개발하기 위한 기본적인 것들..\u003cbr /\u003e\n화면을 반으로 나누고, 각 화면의 시점(카메라)을 다르게 해서 3D로 보이도록 만들며, 기기의 센서 정보를 이용해 그에 맞게 시점을 회전하는&nbsp;head tracking은 VR앱이라면 기본적으로 갖춰야 하는 기능이다.\u003cbr /\u003e\n\u003cbr /\u003e\n예전에 처음 Unity를 사용해 VR 앱을 개발할 때에는 센서 값을 읽어오는 플러그인을 넣고, 카메라를 두 개 만든 다음....... 센서 값에 따라 카메라를 회전하는걸 직접 구현했었는데,, 무려 지금은 Unity에서 자동으로 해 준다.\u003cbr /\u003e\n심지어 카드보드, 데이드림, 오큘러스 등등의 VR 플랫폼 지원까지 해 준다.\u003cbr /\u003e\n관련 내용은 \u003ca href=\"https://docs.unity3d.com/Manual/VROverview.html\"\u003e문서\u003c/a\u003e에 잘 나와 있다.\u003cbr /\u003e\n\u003cbr /\u003e\n언리얼 엔진도 무료로 풀렸으니 나중엔 이거도 사용해 봐야겠다.\u003cbr /\u003e\n엔진 개발자님들 만쉐이\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cbr /\u003e\n이번 글은 Unity에서 다 해주므로.. 분량이 없다. Edit -&gt; Project Settings -&gt; Player에 들어가서 원하는 플랫폼에 대해 Virtual Reality Supported에 체크한방 날리고 카드보드인지 뭔지 사용할 VR 플랫폼을 선택하면 끝이다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://1.bp.blogspot.com/-8zshggH1hBs/We4BFJF1S1I/AAAAAAAAAi4/Y9sM08h0N0ElzQNOdpyfFr7Ga2xCYlMJACLcBGAs/s1600/20171023_234700.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"772\" data-original-width=\"499\" src=\"https://1.bp.blogspot.com/-8zshggH1hBs/We4BFJF1S1I/AAAAAAAAAi4/Y9sM08h0N0ElzQNOdpyfFr7Ga2xCYlMJACLcBGAs/s1600/20171023_234700.png\" /\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cbr /\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://4.bp.blogspot.com/-TFdLnB7WCz8/We4BYiRZ02I/AAAAAAAAAi8/uTJtcwx7HFALSoObl8odJ3KQHt7Tosi7wCLcBGAs/s1600/20171023_234901.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"401\" data-original-width=\"531\" src=\"https://4.bp.blogspot.com/-TFdLnB7WCz8/We4BYiRZ02I/AAAAAAAAAi8/uTJtcwx7HFALSoObl8odJ3KQHt7Tosi7wCLcBGAs/s1600/20171023_234901.png\" /\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cbr /\u003e\n알아서 화면도 나눠주고 렌즈를 통해 보 기 편하도록 화면 왜곡도 해 주며 head tracking도 된다!\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://4.bp.blogspot.com/-0xahV24RdjE/We4C6ShekfI/AAAAAAAAAjI/LtZQjo9pHtI_i2O4lFHjxNshdixvHLNeACLcBGAs/s1600/Screenshot_20171023-235321.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"900\" data-original-width=\"1600\" height=\"360\" src=\"https://4.bp.blogspot.com/-0xahV24RdjE/We4C6ShekfI/AAAAAAAAAjI/LtZQjo9pHtI_i2O4lFHjxNshdixvHLNeACLcBGAs/s640/Screenshot_20171023-235321.png\" width=\"640\" /\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cbr /\u003e\n카드보드를 선택하면 안드로이드 4.4 Kit Kat (API level 19) 부터, 데이드림을 선택하면 안드로이드 7.0 Nougat (API level 24) 부터 앱을 실행할 수 있다.\u003cbr /\u003e\n\u003cbr /\u003e\n음.. 사실 데이드림은 Daydream Ready로 인증받은 기기에서만 실행이  가능하다. 자세한 내용은 \u003ca href=\"https://vr.google.com/daydream/smartphonevr/phones/\"\u003e여기\u003c/a\u003e 참 조\u003cbr /\u003e\n\u003cbr /\u003e\n지금은 그냥 조용히 카드보드를 선택하자.",
      "author": {
        "id": "16293106081577528993",
        "displayName": "Vindy",
        "url": "https://www.blogger.com/profile/16293106081577528993",
        "image": {
          "url": "//www.blogger.com/img/blogger_logo_round_35.png"
        }
      },
      "replies": {
        "totalItems": "0",
        "selfLink": "https://www.googleapis.com/blogger/v3/blogs/4213915415549125978/posts/5498721553506959918/comments"
      },
      "labels": [
        "Unity",
        "VR"
      ],
      "etag": "\"dGltZXN0YW1wOiAxNTA4ODQ1MTM1MjA2Cm9mZnNldDogLTI1MjAwMDAwCg\""
    },
    {
      "kind": "blogger#post",
      "id": "3467903532474159979",
      "blog": {
        "id": "4213915415549125978"
      },
      "published": "2017-10-18T09:30:00-07:00",
      "updated": "2017-10-18T09:33:36-07:00",
      "url": "http://lablk.blogspot.com/2017/10/vr-unity-bluetooth-controller.html",
      "selfLink": "https://www.googleapis.com/blogger/v3/blogs/4213915415549125978/posts/3467903532474159979",
      "title": "[VR] Unity에서 Bluetooth Controller 제어",
      "content": "VR 앱을 개발하기 위해 아이페가 PG-9068 TOMAHAWK 모델의 블루투스 컨트롤러를 구입하였다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://1.bp.blogspot.com/-VynXmuFFBt4/Wedt72QnXzI/AAAAAAAAAhM/S_9Ts0mPbF0HB8juRjor5Og0UB4khPeiACLcBGAs/s1600/4953580_1.jpg\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"500\" data-original-width=\"500\" height=\"320\" src=\"https://1.bp.blogspot.com/-VynXmuFFBt4/Wedt72QnXzI/AAAAAAAAAhM/S_9Ts0mPbF0HB8juRjor5Og0UB4khPeiACLcBGAs/s320/4953580_1.jpg\" width=\"320\" /\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cbr /\u003e\n집에 도착한 모습!\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://1.bp.blogspot.com/-rp_df9tp51M/WedxxxS5blI/AAAAAAAAAhY/dGWMu5l9ofURp3JgmJ29O9HMugZKyR-ugCLcBGAs/s1600/20171019_001756.jpg\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"896\" data-original-width=\"1594\" height=\"223\" src=\"https://1.bp.blogspot.com/-rp_df9tp51M/WedxxxS5blI/AAAAAAAAAhY/dGWMu5l9ofURp3JgmJ29O9HMugZKyR-ugCLcBGAs/s400/20171019_001756.jpg\" width=\"400\" /\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cbr /\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://2.bp.blogspot.com/-SkmwkhdO8Ow/WedxxxEpYSI/AAAAAAAAAhc/b-JNESsuhV0uBdLTFwwmRyY0JCgAdlHgwCLcBGAs/s1600/20171019_001810.jpg\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"896\" data-original-width=\"1594\" height=\"223\" src=\"https://2.bp.blogspot.com/-SkmwkhdO8Ow/WedxxxEpYSI/AAAAAAAAAhc/b-JNESsuhV0uBdLTFwwmRyY0JCgAdlHgwCLcBGAs/s400/20171019_001810.jpg\" width=\"400\" /\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cbr /\u003e\nXbox 컨트롤러와 유사한 구조를 갖고 있다.\u003cbr /\u003e\n\u003cbr /\u003e\nUnity에서 컨트롤러의 입력값을 읽어오기 위해서는 각 버튼이 어떻게 매핑되어 있는지 알아야 한다.\u003cbr /\u003e\n직접 테스트해본 결과 다음 그림과 같이 매핑되어 있었다.\u003cbr /\u003e\n\u003cdiv style=\"text-align: center;\"\u003e\n\u003cbr /\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://1.bp.blogspot.com/-1HK8lmq2UfA/WeeBWVgd6QI/AAAAAAAAAig/5tToG7g0XDoVPhZdx_Bw7nUcaA8qdPRBgCLcBGAs/s1600/20171019_012850.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"624\" data-original-width=\"1380\" height=\"289\" src=\"https://1.bp.blogspot.com/-1HK8lmq2UfA/WeeBWVgd6QI/AAAAAAAAAig/5tToG7g0XDoVPhZdx_Bw7nUcaA8qdPRBgCLcBGAs/s640/20171019_012850.png\" width=\"640\" /\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cbr /\u003e\u003c/div\u003e\nOS와 컨트롤러에 따라 매핑 정보는 달라질 수 있다. 따라서 출시되는 VR 앱에는  이를 잘 파악하여 동적으로 매핑 정보를 파악할 수 있도록 해야 한다.\u003cbr /\u003e\n\u003cbr /\u003e\n그림에서 \"JoystickButton*\"로 매핑되는 버튼은 Digital 값이고, \"*th axis\"로 매핑되는 조이스틱이나 버튼은 Analog 값이다. Digital인가 Analog인가에 따라 Unity에서 값을 읽어오는 방식이 다르다.\u003cbr /\u003e\n(LT, RT 버튼은 Digital과 Analog 방식 모두 동작한다.)\u003cbr /\u003e\n\u003cbr /\u003e\n먼저 Digital 값은 스크립트에서 다음과 같이 쉽게 읽어올 수 있다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv style=\"background-color: #bbbbbb; color: black; font: 14px &quot;courier new&quot;; overflow: auto; padding: 5px;\"\u003e\nbool key_value =&nbsp;Input.GetKey(KeyCode.JoystickButton0);\u003c/div\u003e\n\u003cbr /\u003e\n\u003ca href=\"https://docs.unity3d.com/kr/current/ScriptReference/KeyCode.html\"\u003eUnity reference\u003c/a\u003e를 확인해 보면 KeyCode의 다양한 값을 볼 수 있다. 최대 8개까지의 조이스틱(컨트롤러)를 구분할 수 있으며 각 컨트롤러마다 최대 20개의 버튼을 구분할 수 있다.\u003cbr /\u003e\n이 값을 Input.GetKey() 함수의 인자로 주면 버튼 값을 True나 False로  돌려 준다.\u003cbr /\u003e\n물론&nbsp;Input.GetKeyDown() 이나&nbsp;Input.GetKeyUp() 등의 다른 함수도 사용할 수 있다.\u003cbr /\u003e\n\u003cbr /\u003e\nAnalog 값은 조금 복잡한데, 우선 스크립트에서 읽는 방법은 다음과 같다.\u003cbr /\u003e\n-1.0 ~ 1.0 범위의 값을 얻을 수 있다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv style=\"background-color: #bbbbbb; color: black; font: 14px &quot;courier new&quot;; overflow: auto; padding: 5px;\"\u003e\nfloat key_value =&nbsp;Input.GetAxis(\"Horizontal\");\u003c/div\u003e\n\u003cbr /\u003e\nInput.GetAxis() 함수를 사용하는데, 인자로 주는 string은 읽으려는 axis의 이름이다. Unity는 기본적으로 컨트롤러의 첫 번째 조이스틱에 \"Horizontal\",&nbsp;\"Vertical\" axis가 매핑되어 있다. 이러한 정보는 Edit -&gt; Project Settings -&gt; Input에서 설정 가능하다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://2.bp.blogspot.com/-BBGqsvgafds/Wed3n55zT9I/AAAAAAAAAhs/N2Ihcr6p2-A1T4ilQTtMas-Si4A-5k5sACLcBGAs/s1600/20171019_004719.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"795\" data-original-width=\"526\" src=\"https://2.bp.blogspot.com/-BBGqsvgafds/Wed3n55zT9I/AAAAAAAAAhs/N2Ihcr6p2-A1T4ilQTtMas-Si4A-5k5sACLcBGAs/s1600/20171019_004719.png\" /\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cbr /\u003e\n설정 창을 열게 되면 Inspector에 다음과 같이 InputManager가 보일 것이다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://1.bp.blogspot.com/-qcBfF10zVH4/WeeALXLSIeI/AAAAAAAAAiQ/YqAUiQcw-zsGCHqqnHUkaOpd2m2epa9iwCLcBGAs/s1600/20171019_012350.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"714\" data-original-width=\"533\" src=\"https://1.bp.blogspot.com/-qcBfF10zVH4/WeeALXLSIeI/AAAAAAAAAiQ/YqAUiQcw-zsGCHqqnHUkaOpd2m2epa9iwCLcBGAs/s1600/20171019_012350.png\" /\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cbr /\u003e\n다양한 Axis 이름들이 정의되어 있는데, 그 중에서 \"Horizontal\",&nbsp;\"Vertical\" axis가 미리 정의되어 있는 것을 볼 수 있다. 또 다른 Analog 입력을 추가하고 싶다면 InputManager의 가장 위에 있는 속성인 Size 값을 늘린 후에 추가된 항목에 값을 채워넣으면 된다.\u003cbr /\u003e\n\u003cbr /\u003e\n여기서는 다음과 같이 오른쪽  조이스틱을 입력으로 추가했다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://2.bp.blogspot.com/-Q-WNVHwBTgM/Wed5IZwHFTI/AAAAAAAAAh4/-8tEB24rIDgDoXmDknhI0eLCtJjLq421wCLcBGAs/s1600/20171019_005355.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"596\" data-original-width=\"520\" src=\"https://2.bp.blogspot.com/-Q-WNVHwBTgM/Wed5IZwHFTI/AAAAAAAAAh4/-8tEB24rIDgDoXmDknhI0eLCtJjLq421wCLcBGAs/s1600/20171019_005355.png\" /\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cbr /\u003e\n각 속성에 대한 상세한 내용은 \u003ca href=\"https://docs.unity3d.com/kr/current/Manual/ConventionalGameInput.html\"\u003e여기\u003c/a\u003e 참조\u003cbr /\u003e\n\u003cbr /\u003e\n가장 위에 있는 Name 속 성에 입력하는 string을 스크립트에서 Input.GetAxis() 등의 함수에 인자로 사용하여 해당 Analog 입력 값을 받아올 수 있다.\u003cbr /\u003e\nAxis 속성에는 앞서 언급했던, 버튼과 조이스틱이 매핑된 axis를 선택하면 된다. 오른쪽 조이스틱은 X 축이 3rd axis에, Y 축이 4th axis에 매핑되어 있다고 했으므로 그에 맞게 설정하였다.",
      "author": {
        "id": "16293106081577528993",
        "displayName": "Vindy",
        "url": "https://www.blogger.com/profile/16293106081577528993",
        "image": {
          "url": "//www.blogger.com/img/blogger_logo_round_35.png"
        }
      },
      "replies": {
        "totalItems": "0",
        "selfLink": "https://www.googleapis.com/blogger/v3/blogs/4213915415549125978/posts/3467903532474159979/comments"
      },
      "labels": [
        "Bluetooth",
        "Bluetooth Controller",
        "Unity",
        "VR"
      ],
      "etag": "\"dGltZXN0YW1wOiAxNTA4MzQ0NDE2MjAwCm9mZnNldDogLTI1MjAwMDAwCg\""
    },
    {
      "kind": "blogger#post",
      "id": "4659228365445263684",
      "blog": {
        "id": "4213915415549125978"
      },
      "published": "2017-10-17T20:02:00-07:00",
      "updated": "2017-10-18T01:20:48-07:00",
      "url": "http://lablk.blogspot.com/2017/10/machine-learning-mldivide-linear.html",
      "selfLink": "https://www.googleapis.com/blogger/v3/blogs/4213915415549125978/posts/4659228365445263684",
      "title": "[Machine Learning] mldivide ('\\')를 활용한 linear regression",
      "content": "\u003ch2\u003e\n1. 정의\u003c/h2\u003e\n\u003cbr /\u003e\n행렬 왼쪽 나눗셈 (mldivide, '\\')는 행렬 A, X, Y로 이루어진 다음 시스템에 대해\u003cbr /\u003e\n\u003cblockquote class=\"tr_bq\" style=\"text-align: left;\"\u003e\nA * X = Y\u003c/blockquote\u003e\n다음과 같이 정의된다.\u003cbr /\u003e\n\u003cblockquote class=\"tr_bq\" style=\"text-align: left;\"\u003e\nA \\ Y = X&nbsp;\u003c/blockquote\u003e\n\u003cblockquote class=\"tr_bq\" style=\"text-align: left;\"\u003e\nA * (A \\ Y) = Y\u003c/blockquote\u003e\n\u003cbr /\u003e\nA가 역행렬이 존재하는 정사각 행렬일 경우 다음과 같 이 계산할 수 있다.\u003cbr /\u003e\n\u003cblockquote class=\"tr_bq\"\u003e\nA \\ Y = inv(A) * Y = X\u003c/blockquote\u003e\n\u003cbr /\u003e\n그러나 mldivide는 A의 역행렬이 존재하지 않거나 심지어 정사각 행렬이 아닐 경우에도 정의되는데, 이를 계산하기 위해 다음 링크에 있는 MATLAB 문서는 다음과 같이 그 알고리즘을 설명하고 있다.\u003cbr /\u003e\n\u003cblockquote class=\"tr_bq\"\u003e\n\u003ca href=\"https://kr.mathworks.com/help/matlab/ref/mldivide.html#bt4jslc-6\"\u003ehttps://kr.mathworks.com/help/matlab/ref/mldivide.html#bt4jslc-6\u003c/a\u003e\u003c/blockquote\u003e\n복잡한 알고리즘은 모두 A가 정사각 행렬인 경우에 대한 내용이고, 정사각 행렬이 아닌 경우 QR solver로 해결하도록 되어 있다. MATLAB에는 mldivide 연산 에 위와 같은 알고리즘이 구현되어 있어서, 이를 통해 정사각 행렬이 아닌 경우에도 연산이 가능하며, 나아가 linear regression도 mldivide로 계산할 수 있다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cbr /\u003e\n\u003ch2\u003e\n2. 의미\u003c/h2\u003e\n\u003cdiv style=\"text-align: center;\"\u003e\n\u003cspan style=\"color: red;\"\u003e\u003cbr /\u003e\u003c/span\u003e\u003c/div\u003e\n\u003cdiv style=\"text-align: center;\"\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://3.bp.blogspot.com/-tAS1Ced1miQ/WeYGDXM9tdI/AAAAAAAAAfo/asxY7Wp9pbkwkmDytBqo6dJRGfL7NH1NQCLcBGAs/s1600/20171017_223036.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"219\" data-original-width=\"747\" height=\"116\" src=\"https://3.bp.blogspot.com/-tAS1Ced1miQ/WeYGDXM9tdI/AAAAAAAAAfo/asxY7Wp9pbkwkmDytBqo6dJRGfL7NH1NQCLcBGAs/s400/20171017_223036.png\" width=\"400\" /\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cbr /\u003e\u003c/div\u003e\n위 그림과 같이 행렬 A의 크기를 n * m, Y의 크기를 n * l로 정의할 경우 n, m, l은 각각 다음을 의미한다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cul\u003e\n\u003cli\u003en : 시스템을 이루는 식의 수\u003c/li\u003e\n\u003cli\u003em : 시스템을 이루는 미지수의 수 (차원)\u003c/li\u003e\n\u003cli\u003el : 시스템의 개수 (각 시스템은 동일한 계수를 갖지만, 미지수와 상수는 다름)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbr /\u003e\n예를 들어 다음과 같은 시스템에 대해\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv style=\"text-align: center;\"\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://4.bp.blogspot.com/-otnwPEEc6Hc/WeYBwWlQnhI/AAAAAAAAAfU/vUFlvB5KL3Qxwqb5oECLp_89Jt0Pf3gzgCLcBGAs/s1600/20171017_221141.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"128\" data-original-width=\"296\" height=\"85\" src=\"https://4.bp.blogspot.com/-otnwPEEc6Hc/WeYBwWlQnhI/AAAAAAAAAfU/vUFlvB5KL3Qxwqb5oECLp_89Jt0Pf3gzgCLcBGAs/s200/20171017_221141.png\" width=\"200\" /\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv style=\"text-align: left;\"\u003e\n\u003cbr /\u003e\u003c/div\u003e\n\u003c/div\u003e\n행렬로 다음과 같이 표현할 수 있고, mldivide로 해를 구할 수 있다.\u003cbr /\u003e\n\u003cdiv style=\"text-align: center;\"\u003e\n\u003cbr /\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://3.bp.blogspot.com/-48rQtzeeEQk/WeYEAicYU4I/AAAAAAAAAfg/dHKZjr2qEIQw6wOcBiY3G8t-dgob-VOgwCLcBGAs/s1600/20171017_222119.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"152\" data-original-width=\"610\" height=\"79\" src=\"https://3.bp.blogspot.com/-48rQtzeeEQk/WeYEAicYU4I/AAAAAAAAAfg/dHKZjr2qEIQw6wOcBiY3G8t-dgob-VOgwCLcBGAs/s320/20171017_222119.png\" width=\"320\" /\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cbr /\u003e\u003c/div\u003e\nn과 m이 동일하면서 A의 rank가 m과 같은 경우, 즉 역행렬이 존재하는 경우는 위와 같이 풀이가 가능하다.\u003cbr /\u003e\n\u003cbr /\u003e\n그러나 정사각 행렬이 아닌 경우 n과 m의 관계에 따라 mldivide는 다음과 같은 의미를 갖는 다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cul\u003e\n\u003cli\u003en(또는 A의 rank)이 m보다 작은 경우 : 무수히 많은 해\u003c/li\u003e\n\u003cli\u003en이 m보다 큰 경우 : Least square를 만족하는 Linear regression\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbr /\u003e\nn이 m보다 작은 경우 mldivide는 다음과 같이 m - n(또는 A의 rank)개에 해당하는 미지수를 0으로 설정한 후 나머지 미지수에 대한 값을 계산한다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv style=\"text-align: center;\"\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://1.bp.blogspot.com/-5gl08b5JEg0/Wea6ARIDi3I/AAAAAAAAAgU/MwFRHrpMVlgk2xuUd7wG6VRlSSze1M8XwCLcBGAs/s1600/20171018_111803.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"522\" data-original-width=\"429\" src=\"https://1.bp.blogspot.com/-5gl08b5JEg0/Wea6ARIDi3I/AAAAAAAAAgU/MwFRHrpMVlgk2xuUd7wG6VRlSSze1M8XwCLcBGAs/s1600/20171018_111803.png\" /\u003e\u003c/a\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cbr /\u003e\n\u003cbr /\u003e\n\u003ch2\u003e\n3. Linear Regression\u003c/h2\u003e\n\u003cbr /\u003e\nn이 m보다 큰 경우 선형 시스템 상에서 는 해가 존재하지 않게 된다. 대신에 mldivide는 Least square를 만족하는 Linear regression으로 동작한다. 따라서 다음 식과  같이 행렬곱이 mldivide의 역연산이 될 수 없다.\u003cbr /\u003e\n\u003cblockquote class=\"tr_bq\"\u003e\nA * (A \\ Y) ≠ Y\u003c/blockquote\u003e\nLinear regression의 경우 n, m의 의미는 다음과 같이 재 정의될 수 있다. l은 동일한 데이터, 속성에 대한 단순 반복이므로 중요하지 않다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cul\u003e\n\u003cli\u003en : 데이터의 수\u003c/li\u003e\n\u003cli\u003em : 속성의 수\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbr /\u003e\n이에 따라 행렬 A는 기존의  계수 행렬(Coefficient Matrix)에서 각 속성들의 관계를 나타내는 데이터들의 집합, 즉 Training data의 집합으로 재해석할 수  있고, Y 행렬도 동일하게 Training data 집합의 속성을 갖는다. Linear regression의 결과인 X 행렬은 각 속성들의 가중치를 나 타낸다.\u003cbr /\u003e\n\u003cbr /\u003e\n가장 간단하게, n개의 두 속성 x, y를 갖는 데이터를 이용하여 다음과 같은 선형  모델로 Regression할 때\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://2.bp.blogspot.com/-2qxVwKwO8KY/WeYIBv78VMI/AAAAAAAAAf8/aiAnHbsLZzcgdkiN1A6WcjfPAOKvuqd3ACLcBGAs/s1600/20171017_223908.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"52\" data-original-width=\"202\" height=\"25\" src=\"https://2.bp.blogspot.com/-2qxVwKwO8KY/WeYIBv78VMI/AAAAAAAAAf8/aiAnHbsLZzcgdkiN1A6WcjfPAOKvuqd3ACLcBGAs/s200/20171017_223908.png\" width=\"100\" /\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cdiv style=\"text-align: center;\"\u003e\n\u003cbr /\u003e\u003c/div\u003e\n 행렬 A, Y와 X는 다음과 같이 정의된다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://1.bp.blogspot.com/--MHhodUpw4M/WeYIKM2PA9I/AAAAAAAAAgA/DCE54hHH73gTPFrzjSbNah4mB9HIaqwQgCLcBGAs/s1600/20171017_223945.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"452\" data-original-width=\"234\" height=\"200\" src=\"https://1.bp.blogspot.com/--MHhodUpw4M/WeYIKM2PA9I/AAAAAAAAAgA/DCE54hHH73gTPFrzjSbNah4mB9HIaqwQgCLcBGAs/s200/20171017_223945.png\" width=\"102\" /\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cbr /\u003e\n행렬 A는 상수항을 의미하는 1로 이루어진 열과 각각의 속성에 해당하는 데이터로 이루어진 열들로 구성되며, Y는 남은 한 속성에 해당하는 데이터로 구성된다.\u003cbr /\u003e\n행렬 X는 상수항과 속성의 계수로 구성되며, 선형 모델을 나타낸다.\u003cbr /\u003e\n\u003cbr /\u003e\n예를 들어서 키와 몸무게 사이의 관계에 관한 Linear regression 문제를 MATLAB을 사용하여 푸는 방법은 다음과 같다.\u003cbr /\u003e\n\u003cdiv style=\"text-align: right;\"\u003e\n\u003cspan style=\"font-size: x-small;\"\u003e[데이터 :&nbsp;\u003ca href=\"https://github.com/johnmyleswhite/ML_for_Hackers/blob/master/07-Optimization/data/01_heights_weights_genders.csv\"\u003ehttps://github.com/johnmyleswhite/ML_for_Hackers/blob/master/07-Optimization/data/01_heights_weights_genders.csv\u003c/a\u003e]\u003c/span\u003e\u003c/div\u003e\n\u003cbr /\u003e\n\u003cdiv style=\"text-align: center;\"\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://3.bp.blogspot.com/-P76P4uM9uCE/Wea70K3EtaI/AAAAAAAAAgg/DRky2Yd4lcQSQqd4gP8zR7tI1RZhbiexwCLcBGAs/s1600/MATLAB%2Blinear%2Bregression.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"260\" data-original-width=\"315\" src=\"https://3.bp.blogspot.com/-P76P4uM9uCE/Wea70K3EtaI/AAAAAAAAAgg/DRky2Yd4lcQSQqd4gP8zR7tI1RZhbiexwCLcBGAs/s1600/MATLAB%2Blinear%2Bregression.png\" /\u003e\u003c/a\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cbr /\u003e\n최종적으로 다음과 같은 선형 모델을 얻게 된다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv style=\"text-align: center;\"\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://1.bp.blogspot.com/-2V5YX9_r9rM/Wea8pdjZ9EI/AAAAAAAAAgo/c6Kla2rm8fMUbl4R_6YbCPr7RogqPIP9QCLcBGAs/s1600/20171018_112939.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"82\" data-original-width=\"942\" height=\"27\" src=\"https://1.bp.blogspot.com/-2V5YX9_r9rM/Wea8pdjZ9EI/AAAAAAAAAgo/c6Kla2rm8fMUbl4R_6YbCPr7RogqPIP9QCLcBGAs/s320/20171018_112939.png\" width=\"320\" /\u003e\u003c/a\u003e\u003c/div\u003e\n\u003c/div\u003e\n\u003cbr /\u003e\n\u003cbr /\u003e\n\u003ch2\u003e\n4. 계산\u003c/h2\u003e\n\u003cbr /\u003e\nn &gt; m인 행렬 A에 대해 일 반적인 경우에는 다음과 같이 계산이 가능하다.\u003cbr /\u003e\n\u003cblockquote class=\"tr_bq\"\u003e\nX = A \\ Y = inv(A' * A) * A' * Y&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (A'는 A의 Transpose)\u003c/blockquote\u003e\n그러나 다음 행렬과 같이 데이터의 스케일 차이가 큰 경우 부동소수점 연산 정밀도의 한계로, 정확한 해를 구할 수 없게 된다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cdiv style=\"text-align: center;\"\u003e\n\u003cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003e\n\u003ca href=\"https://3.bp.blogspot.com/-8DPSxBn23zM/Wea_UyLtBQI/AAAAAAAAAg0/7hm0QD9RWWg2hazd06jQ7mfa0XAXg6C-wCLcBGAs/s1600/20171018_114105.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003e\u003cimg border=\"0\" data-original-height=\"165\" data-original-width=\"620\" src=\"https://3.bp.blogspot.com/-8DPSxBn23zM/Wea_UyLtBQI/AAAAAAAAAg0/7hm0QD9RWWg2hazd06jQ7mfa0XAXg6C-wCLcBGAs/s1600/20171018_114105.png\" /\u003e\u003c/a\u003e\u003c/div\u003e\n\u003cbr /\u003e\u003c/div\u003e\nMATLAB에는 해를 구하기 위해 다음의 여러 가지 방법들을 제공한다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cul\u003e\n\u003cli\u003eQR Solver :\u003cbr /\u003e&nbsp; &nbsp; [Q, R] = qr(A, 0)\u003cbr /\u003e&nbsp; &nbsp; X = R \\ (Q' * Y)\u003c/li\u003e\n\u003cli\u003eX = pinv(A) * Y\u003c/li\u003e\n\u003cli\u003eX = linsolve(A, Y)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbr /\u003e\n\u003cbr /\u003e\n앞의 예제를 각각의 방법으로 구한 해와 RMSE는 다음과 같다.\u003cbr /\u003e\n\u003cbr /\u003e\n\u003ctable align=\"center\" border=\"0\" cellpadding=\"10\" cellspacing=\"1\" style=\"text-align: center;\"\u003e\u003ctbody\u003e\n\u003ctr\u003e\u003ctd\u003e\u003c/td\u003e\u003ctd\u003eexact\u003cbr /\u003e\nsolution\u003c/td\u003e\u003ctd\u003eA \\ Y\u003c/td\u003e\u003ctd\u003eQR Solver\u003c/td\u003e\u003ctd\u003epinv(A) * Y\u003c/td\u003e\u003ctd\u003elinsolve(A, Y)\u003c/td\u003e\u003ctd\u003einv(A' * A) * A' * Y\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eb\u003c/td\u003e\u003ctd\u003e0.0\u003c/td\u003e\u003ctd\u003e-0.0127\u003c/td\u003e\u003ctd\u003e-0.0555\u003c/td\u003e\u003ctd\u003e-0.0313\u003c/td\u003e\u003ctd\u003e-0.0127\u003c/td\u003e\u003ctd\u003e0.0041\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003ea\u003c/td\u003e\u003ctd\u003e1.0\u003c/td\u003e\u003ctd\u003e1.0000\u003c/td\u003e\u003ctd\u003e1.0000\u003c/td\u003e\u003ctd\u003e1.0000\u003c/td\u003e\u003ctd\u003e1.0000\u003c/td\u003e\u003ctd\u003e1.0000\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eRMSE\u003c/td\u003e\u003ctd\u003e0.0\u003c/td\u003e\u003ctd\u003e0.0078\u003c/td\u003e\u003ctd\u003e0.0349\u003c/td\u003e\u003ctd\u003e0.0590\u003c/td\u003e\u003ctd\u003e0.0078\u003c/td\u003e\u003ctd\u003e0.1243\u003c/td\u003e\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cbr /\u003e\nA \\ Y와 linsolve의 성능이 가장 좋은 것을 확인할 수 있다.\u003cbr /\u003e\n반면 상수항에 비해 데이터가 작은 경우에는 QR Solver가 가장 정확했다.\u003cbr /\u003e\n\u003ctable align=\"center\" border=\"0\" cellpadding=\"10\" cellspacing=\"1\" style=\"text-align: center;\"\u003e\u003ctbody\u003e\n\u003ctr\u003e\u003ctd\u003e\u003c/td\u003e\u003ctd\u003eexact\u003cbr /\u003e\nsolution\u003c/td\u003e\u003ctd\u003eA \\ Y\u003c/td\u003e\u003ctd\u003eQR Solver\u003c/td\u003e\u003ctd\u003epinv(A) * Y\u003c/td\u003e\u003ctd\u003elinsolve(A, Y)\u003c/td\u003e\u003ctd\u003einv(A' * A) * A' * Y\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eb\u003c/td\u003e\u003ctd\u003e0.0\u003c/td\u003e\u003ctd\u003e-1.05998e-28\u003c/td\u003e\u003ctd\u003e-5.5511e-29\u003c/td\u003e\u003ctd\u003e-8.2740e-29\u003c/td\u003e\u003ctd\u003e-1.05998e-28\u003c/td\u003e\u003ctd\u003e-1.4724e-28\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003ea\u003c/td\u003e\u003ctd\u003e1.0\u003c/td\u003e\u003ctd\u003e1.0000\u003c/td\u003e\u003ctd\u003e1.0000\u003c/td\u003e\u003ctd\u003e1.0000\u003c/td\u003e\u003ctd\u003e1.0000\u003c/td\u003e\u003ctd\u003e1.0000\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eRMSE\u003c/td\u003e\u003ctd\u003e0.0\u003c/td\u003e\u003ctd\u003e5.6798e-29\u003c/td\u003e\u003ctd\u003e3.1554e-29\u003c/td\u003e\u003ctd\u003e4.0409e-29\u003c/td\u003e\u003ctd\u003e5.6798e-29\u003c/td\u003e\u003ctd\u003e6.1834e-29\u003c/td\u003e\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cbr /\u003e\n경우에 따라 다른 방법의 성능이 더 좋을 수 있으며, 데이터의 특성에 따라 적절한 방법을 선택해야 한다.",
      "author": {
        "id": "16293106081577528993",
        "displayName": "Vindy",
        "url": "https://www.blogger.com/profile/16293106081577528993",
        "image": {
          "url": "//www.blogger.com/img/blogger_logo_round_35.png"
        }
      },
      "replies": {
        "totalItems": "0",
        "selfLink": "https://www.googleapis.com/blogger/v3/blogs/4213915415549125978/posts/4659228365445263684/comments"
      },
      "labels": [
        "etc",
        "linear regression",
        "machine learning",
        "MATLAB",
        "mldivide"
      ],
      "etag": "\"dGltZXN0YW1wOiAxNTA4MzE0ODQ4MzI5Cm9mZnNldDogLTI1MjAwMDAwCg\""
    }
  ],
  "etag": "\"MjAxOC0xMS0wOVQwMjowMToyNy40ODRa\""
}

completed